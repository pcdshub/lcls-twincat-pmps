<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <DUT Name="ST_Device" Id="{bc9ee667-91fb-46f2-af26-3ee8851b76e5}">
    <Declaration><![CDATA[TYPE ST_Device :
STRUCT
    //IO
    stAxis	:	AXIS_REF;
    //The following limit switches must be TRUE or high (ie. NC) to enable that direction of motion
    //The EPICS display should show an inverted indicator to communicate end of travel reached
    i_xLoLim	AT %I*	:	BOOL; //Wire normally-closed
    i_xHiLim	AT %I*	:	BOOL; //Wire normally-closed

    //Acuator Parameters
    lrUpperPositionLimit	:	LREAL := 10000000000; //Use in conjuntion with limit switches or set to a huge number to ignore
    lrLowerPositionLimit	:	LREAL := -10000000000; //Use in conjuntion with limit switches or set to a huge number to ignore

    xEnable	:	BOOL := TRUE;

    //Supervisory System

    //MPS Override
    xOverrideMPSLimits	: BOOL := FALSE; //Set true to move beyond MPS limits. Note this will trip beam off.

    //Status and Faults
    xClearFaults	:	BOOL;	//Rising edge tries to clear faults of all kinds

    xGovernorFault	:	BOOL;	//Indicates governor is faulted
    xGovernorOverridden	:	BOOL; //Indicates governor is in override mode
    xSMFault		:	BOOL;	//Indicates component state machine is faulted

    //Device States
    StateTable		:	FB_LinearDeviceStateTable;

    stTransitionState	:	ST_DeviceState; //The transition state might have non-zero beam parameters
    nSafeState			:	UDINT; //State where the device is considered safe
    nTransitionState	:	UDINT;

    nRequestedState	:	UDINT; //EPICS control, cleaned (checked against array limits) and deposited in nTargetState
    nTargetState	:	UDINT; //The requested state should be deposited here after cleaning
    nActiveState	:	UDINT; //The last successfully reached state


END_STRUCT
END_TYPE
]]></Declaration>
  </DUT>
</TcPlcObject>