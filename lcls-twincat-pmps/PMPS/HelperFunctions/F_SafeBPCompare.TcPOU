<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="F_SafeBPCompare" Id="{688ded70-423f-032d-1c2c-e52a6cd87b7c}" SpecialFunc="None">
    <Declaration><![CDATA[(*Compares BeamParam1 to BeamParam2: if the parameters of BeamParam1 are more conservative than BeamParam2
the result will be true. *)
// Does not consider status. Status must be evaluated elsewhere.
{attribute 'no_check'}
FUNCTION F_SafeBPCompare : BOOL
VAR_INPUT
    BeamParam1    :    ST_BeamParams; //Must be more conservative than 2
    BeamParam2    :    ST_BeamParams;
END_VAR
VAR
    // Internal Attenuation OK boolean
    xAttOK: BOOL := FALSE;
    // Internal Per-pulse energy OK boolean
    xPPmjOK: BOOL := FALSE;
    // Internal photon energy OK boolean
    xEvOK: BOOL := FALSE;
    // Internal Beam Rate OK boolean
    xRateOK: BOOL;
    //Internal Beam Class Range OK boolean
    xBCOK : BOOL := FALSE;
    idx : UINT;
    xAuxAttOK : BOOL := TRUE;
    xAuxAprtOK : BOOL := TRUE;

    Att1 : REFERENCE TO ST_PMPS_Attenuator;
    Att2 : REFERENCE TO ST_PMPS_Attenuator;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
xAttOK := BeamParam1.nTran <= MIN(PMPS_GVL.TRANS_SCALING_FACTOR, (BeamParam2.nTran *(PMPS_GVL.TRANS_SCALING_FACTOR+PMPS_PARAM.TRANS_MARGIN))/PMPS_GVL.TRANS_SCALING_FACTOR );
xEvOK := (BeamParam1.neVRange AND BeamParam2.neVRange) = BeamParam1.neVRange;
xRateOK    := (BeamParam1.nRate <= BeamParam2.nRate) OR (PMPS_GVL.stCurrentBeamParameters.nMachineMode =1); //ignore in SC mode
xBCOK := ((BeamParam1.nBCRange AND BeamParam2.nBCRange) = BeamParam1.nBCRange) OR (PMPS_GVL.stCurrentBeamParameters.nMachineMode =0); //ignore in NC mode;

FOR idx:=1 to PMPS_GVL.AUX_ATTENUATORS DO
    Att1 REF= BeamParam1.astAttenuators[idx];
    Att2 REF= BeamParam2.astAttenuators[idx];
    xAuxAttOK R= ( Att1.nTran > MIN( PMPS_GVL.TRANS_SCALING_FACTOR, ( (Att2.nTran *(PMPS_GVL.TRANS_SCALING_FACTOR+PMPS_PARAM.TRANS_MARGIN))/PMPS_GVL.TRANS_SCALING_FACTOR ) ) );
END_FOR

FOR idx:=1 to PMPS_GVL.MAX_APERTURES DO
    xAuxAprtOK R= BeamParam1.astApertures[idx].Height > BeamParam2.astApertures[idx].Height OR
    BeamParam1.astApertures[idx].Width > BeamParam2.astApertures[idx].Width;
END_FOR

F_SafeBPCompare := xAttOK AND xEvOK AND xRateOK AND xAuxAprtOK AND xAuxAttOK AND xBCOK;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>