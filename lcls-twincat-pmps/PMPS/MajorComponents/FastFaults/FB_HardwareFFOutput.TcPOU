<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_HardwareFFOutput" Id="{4c5345fc-1911-455c-a3d8-14bade73dcd8}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK FB_HardwareFFOutput
VAR CONSTANT
    FF_ARRAY_UPPER_BOUND : UINT := PMPS_PARAM.MAX_FAST_FAULTS;
END_VAR
VAR_INPUT
    {attribute 'pytmc' := '
        pv: ClearFault
        io: o
        field: DESC Might be overidden by PLC writes
     '}
    i_xReset    :    BOOL;
    {attribute 'pytmc' := '
        pv: EnableVeto
        io: o
     '}
    i_xVeto    :    BOOL;
    bAutoReset : BOOL := FALSE; // Set true for the FFO to automatically permit beam again after all fast faults are cleared
	i_sNetID : T_AmsNetID:=''; //Set to the Arbiter AmsNetID to be used for the synchronisation. An empty string means the system will sue local time
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: FaultHWO
        io: i
        field: DESC Hardware Output Status
     '}
    q_xFastFaultOut    AT %Q*    :    BOOL;
	q_xValidSyncTime : BOOL;// system time bValid output True when sync is successful
END_VAR
VAR_IN_OUT

END_VAR
VAR
    {attribute 'pytmc' := '
        pv: FF
     '}
    astFF : ARRAY[1..FF_ARRAY_UPPER_BOUND] OF ST_FF;
    
    {attribute 'pytmc' := '
        pv: RegistrationFailure
        io: io
     '}
    xFastFaultRegFail  :   BOOL := FALSE; // Set true if a fast fault fails to register. Holds beam off.
    tFFRegFail : F_TRIG;
    
    {attribute 'instance-path'}
    {attribute 'noinit'}
    sPath    :    T_MaxString;

	{attribute 'pytmc' := '
        pv: OK
        io: i
     '}
    xOK    :    BOOL:= TRUE; // Current internal state of FFO, indicates if FFO will accept a reset
    
    rtReset    :    R_TRIG;
    rtResetandOK : R_TRIG;
    
    nIndex    :    UINT := 1;
	
	IdxOK: BOOL;
    
    fbTime : FB_LocalSystemTime := ( bEnable := TRUE, dwCycle := 1 ); //Get current system time, used for override
	fbTime_to_UTC: FB_TzSpecificLocalTimeToSystemTime;
	fbGetTimeZone: FB_GetTimeZoneInformation;
    fbJson : FB_JsonSaxWriter;
    pmpsTypeCode : UDINT := 0; // shows up in json as pmps_typecode
    fbLogger : FB_LogMessage := (
        eSevr := TcEventSeverity.Critical,
        eSubsystem := E_Subsystem.MPS,
        nMinTimeViolationAcceptable := PMPS_PARAM.MAX_FAST_FAULTS);

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// <TODO> latch off beam if DI card status goes bad]]></ST>
    </Implementation>
    <Action Name="EvaluateOutput" Id="{1614665f-52f0-4071-a93e-c3d94919ee5b}">
      <Implementation>
        <ST><![CDATA[
////////////////////////////////////////////////////////////////
// Critical code. Do not touch unless you know what you're doing
////////////////////////////////////////////////////////////////

//<TODO> add diagnostic for success or failure of reset
rtReset(CLK:=i_xReset);
rtResetandOK(CLK:=(rtReset.Q OR bAutoReset) AND xOK);

q_xFastFaultOut S= rtResetandOK.Q;
q_xFastFaultOut R= (NOT xOK OR xFastFaultRegFail);

//Reset OK for next cycle
xOK := True;

////////////////////////////////////////////////////////////////]]></ST>
      </Implementation>
    </Action>
    <Method Name="EvaluateOverrides" Id="{b05563e8-13ae-495e-807c-befe31dea571}">
      <Declaration><![CDATA[METHOD EvaluateOverrides : BOOL
VAR_INPUT
END_VAR
VAR
    FF : REFERENCE TO ST_FF;
    EvalIdx: DINT := 1;
END_VAR
VAR CONSTANT
	MaxTime : DINT:= 4294080;(*49.7 days*)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Get local System Time
fbTime(sNetID:=i_sNetID);
//Get Time Zone
fbGetTimeZone(sNetID:=i_sNetID,bExecute:=TRUE,tTimeout:=T#10S);
//change local time to UTC to be compatible with unix time epoch widget
fbTime_to_UTC(in:= fbTime.systemTime , tzInfo:=fbGetTimeZone.tzInfo);
q_xValidSyncTime := fbTime.bValid AND NOT fbGetTimeZone.bError;

FOR EvalIdx := 1 TO FF_ARRAY_UPPER_BOUND DO
    
    FF REF= astFF[EvalIdx];
    
    IF NOT FF.Info.InUse THEN 
        CONTINUE;
    ELSE
        // Veto timer
        IF FF.Ovrd.Deactivate THEN 
            FF.Ovrd.Timer.PT := T#0s; // Only needs to be set zero for one cycle
        ELSIF FF.Ovrd.Activate THEN
			FF.Ovrd.StartDT:= TO_DINT(TO_DT(SystemTime_TO_DT(fbTime_to_UTC.out)));
			IF (FF.Ovrd.StartDT < FF.Ovrd.Expiration) THEN
				FF.Ovrd.Expiration:= LIMIT(0,FF.Ovrd.Expiration, FF.Ovrd.StartDT+MaxTime ); 
           		FF.Ovrd.Timer.PT := TO_DT(FF.Ovrd.Expiration)- SystemTime_TO_DT(fbTime_to_UTC.out);
			END_IF	
        END_IF
        
        // UDINT conversions for ESS module compatibility.
        FF.Ovrd.Timer(
            IN := FF.Ovrd.Activate, // Rising edge activated
            Q => FF.Ovrd.Active);
            
        FF.Ovrd.tOvrdActivate(CLK:=FF.Ovrd.Active);
        FF.Ovrd.OvrdActLogAck S= FF.Ovrd.tOvrdActivate.Q;
        
        FF.Ovrd.tOvrdExpiring(CLK:=FF.Ovrd.Active);
        FF.Ovrd.OvrdExpLogAck S= FF.Ovrd.tOvrdExpiring.Q;
            
        FF.Ovrd.ElapsedTime := TIME_TO_UDINT(FF.Ovrd.Timer.ET);
        
        FF.Ovrd.RemainingTime := MAX(0, TO_DINT(FF.Ovrd.Timer.PT) - FF.Ovrd.ElapsedTime);
        
        // Clear pushbuttons
        FF.Ovrd.Activate := FALSE;
        FF.Ovrd.Deactivate := FALSE;
        
    END_IF    
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="EvaluateVetos" Id="{a668f2a3-9954-4aeb-ad93-2aac65e64302}">
      <Declaration><![CDATA[{attribute 'obsolete' := 'Use EvaluateOverrides instead.'} 
METHOD EvaluateVetos : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Action Name="Execute" Id="{f8057b03-4d9a-40d4-a5d5-e679c5b7e795}">
      <Implementation>
        <ST><![CDATA[EvaluateOverrides();
EvaluateOutput();
ExecuteLogging();
]]></ST>
      </Implementation>
    </Action>
    <Method Name="ExecuteLogging" Id="{0b57308b-9b1c-4482-8d48-fd43e479e123}">
      <Declaration><![CDATA[METHOD ExecuteLogging : BOOL
VAR_INPUT
END_VAR
VAR
    FF : REFERENCE TO ST_FF;
    logIdx : DINT := 1; 
END_VAR
VAR_INST
    HelloTimer : TOF := ( PT:=T#24h );
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR logIdx := 1 to FF_ARRAY_UPPER_BOUND do
    
    FF REF= astFF[logIdx];
    
    IF NOT FF.Info.InUse THEN 
        CONTINUE;
    ELSE
        IF FF.FaultAck THEN

            pmpsTypeCode := 1;
            FormulateLogJson(FF);
            fbLogger(sMsg := 'Fault, beam off', eSevr:=TcEventSeverity.Critical);
            
            FF.FaultAck := FALSE;
        END_IF
        
        IF FF.Ovrd.OvrdActLogAck THEN
            
            pmpsTypeCode := 2;
            FormulateLogJson(FF);
            
            fbLogger(sMsg := 'Override activated', eSevr:=TcEventSeverity.Warning);
            
            FF.Ovrd.OvrdActLogAck := FALSE;
        END_IF
        
        IF FF.Ovrd.OvrdExpLogAck THEN
            
            pmpsTypeCode := 3;
            FormulateLogJson(FF);
            
            fbLogger(sMsg := 'Override released', eSevr:=TcEventSeverity.Warning);
            
            FF.Ovrd.OvrdExpLogAck := FALSE;
        END_IF
        
        IF FF.ClearAck THEN
            
            pmpsTypeCode := 8;
            FormulateLogJson(FF);
            
            fbLogger(sMsg := 'Fault cleared', eSevr:=TcEventSeverity.Info);
            
            FF.ClearAck := FALSE;
        END_IF
        
        
    END_IF
END_FOR

// Log registration fault cleared
tFFRegFail(CLK:=xFastFaultRegFail);
IF tFFRegFail.Q THEN
    fbJson.StartObject();
    fbJson.AddKey('pmps_typecode');
    fbJson.AddUdint(5);
    fbJson.AddKey('pmps_path');
    fbJson.AddString(sPath);
    fbJson.EndObject();
    fbJson.CopyDocument(pDoc:=fbLogger.sJson, SIZEOF(fbLogger.sJson));
    fbLogger(sMsg := 'Fast fault registration failure cleared. This may be bad as a fast fault could go unoticed.', 
        eSevr:=TcEventSeverity.Warning);  
END_IF

// Say hello
HelloTimer.IN := NOT HelloTimer.Q;
HelloTimer();
IF HelloTimer.IN THEN
    pmpsTypeCode := 10;
    FormulateLogJson(FF);   
    fbLogger(eSubsystem:=E_Subsystem.NILVALUE,
        eSevr := TcEventSeverity.Info,
        sMsg := 'FFO is alive');
    fbLogger.eSubsystem := E_Subsystem.MPS;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Action Name="ExecuteNoLog" Id="{a5cbc903-644b-4d9d-92a3-d1a33065eafd}">
      <Implementation>
        <ST><![CDATA[EvaluateOverrides();
EvaluateOutput();
//ExecuteLogging();
]]></ST>
      </Implementation>
    </Action>
    <Method Name="FormulateLogJson" Id="{1e592e14-8e12-4b07-bc53-a921f8f882df}">
      <Declaration><![CDATA[METHOD INTERNAL FormulateLogJson : STRING
VAR_INPUT
    FF : ST_FF;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbJson.StartObject();
fbJson.AddKey('pmps_typecode');
fbJson.AddUdint(pmpsTypeCode);
fbJson.AddKey('pmps_path');
fbJson.AddString(FF.Info.sPath);
fbJson.AddKey('pmps_device_name');
fbJson.AddString(FF.Info.DevName);
fbJson.EndObject();
fbLogger.sJson := fbJson.GetDocument();
fbJson.ResetDocument();]]></ST>
      </Implementation>
    </Method>
    <Method Name="IdxCheckIn" Id="{9a63f75f-7c14-46d0-b762-024d9e3e2e01}">
      <Declaration><![CDATA[METHOD INTERNAL IdxCheckIn : BOOL
VAR_INPUT
    Idx : DINT;
    OK : BOOL;
    Reset : BOOL;
END_VAR
VAR
    stFF : ST_FF;
    BeamPermitted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Idx := LIMIT(1,Idx,FF_ARRAY_UPPER_BOUND);
stFF := THIS^.astFF[Idx];

// Updating internal fault state
stFF.OK := OK;

// Reset and latching logic
stFF.rtReset(CLK:=stFF.Reset (*epics*) OR Reset (*from other PLC logic *) );
stFF.Reset R= stFF.rtReset.Q;
stFF.bsFF(SET := stFF.rtReset.Q OR stFF.Info.AutoReset, RESET1:= NOT OK);    

BeamPermitted := stFF.bsFF.Q1 OR stFF.Ovrd.Active OR (i_xVeto AND stFF.Info.Vetoable);

// Fault generation    
IF NOT BeamPermitted THEN
    THIS^.xOK := FALSE; //Very clever, thanks Zach!
END_IF

// Fast fault accumulation
stFF.ftCountFault(CLK:=stFF.bsFF.Q1);
IF stFF.ftCountFault.Q THEN PMPS_GVL.AccumulatedFF := PMPS_GVL.AccumulatedFF + 1; END_IF

//Clear pushbuttons
stFF.Reset := FALSE;

// Log when this fault faults
stFF.FaultAck S= stFF.BeamPermitted AND NOT BeamPermitted;

// Log when this fault has cleared
stFF.ClearAck S= BeamPermitted AND NOT stFF.BeamPermitted;

stFF.BeamPermitted := BeamPermitted;

// Copy state back to ff struct
THIS^.astFF[Idx] := stFF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IdxLookup" Id="{e571e0d3-bc95-49b4-9def-e21fb7afa358}">
      <Declaration><![CDATA[METHOD IdxLookup : ST_FF
VAR_INPUT
    Idx : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Idx := LIMIT(1,Idx,FF_ARRAY_UPPER_BOUND);
IdxLookup := THIS^.astFF[Idx];]]></ST>
      </Implementation>
    </Method>
    <Method Name="Register" Id="{23e16e56-a8bb-4023-a4d1-ddbd32f89678}">
      <Declaration><![CDATA[METHOD INTERNAL Register : BOOL
VAR_INPUT
    stFFInfo : ST_FFInfo := (
        sPath := '',
        Desc := '',
        TypeCode := 16#00,
        DevName := ''); // Fast fault information
        
END_VAR
VAR_OUTPUT
    FFOName : T_MaxString;
    Idx : UINT;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FFOName := THIS^.sPath;
Idx := THIS^.nIndex;

IF THIS^.nIndex <= FF_ARRAY_UPPER_BOUND THEN
    
    THIS^.astFF[MIN(THIS^.nIndex,FF_ARRAY_UPPER_BOUND)].Info:=stFFInfo;
    
    THIS^.nIndex := THIS^.nIndex + 1;
    
    Register := TRUE; // Add successful    
ELSE
    fbJson.StartObject();
    fbJson.AddKey('pmps_typecode');
    fbJson.AddUdint(4);
    fbJson.AddKey('pmps_path');
    fbJson.AddString(stFFInfo.sPath);
    fbJson.AddKey('pmps_device_name');
    fbJson.AddString(stFFInfo.DevName);
    fbJson.EndObject();
    fbLogger.sJson := fbJson.GetDocument();
    fbJson.ResetDocument();
    fbLogger(sMsg:='Fast fault registration failed. Too many fast faults on this FFO.',
        eSevr:=TcEventSeverity.Warning,
        eSubsystem:=E_Subsystem.MPS);
    xFastFaultRegFail := TRUE;
    Register := FALSE; // Failed to add name to list
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>