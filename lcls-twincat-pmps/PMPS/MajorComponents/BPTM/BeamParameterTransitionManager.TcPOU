<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="BeamParameterTransitionManager" Id="{f431705f-a58e-48ab-bbd5-262d6c623c7b}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Implements the procedure for safely transitioning between device states.

NOTE:
The BPTM will throw an error if the arbiter does not have enough space for the transition and new final assertion. 

 *)
FUNCTION_BLOCK BeamParameterTransitionManager
VAR_IN_OUT
    
    fbArbiter    :    FB_Arbiter; //Connect to local arbiter
    
END_VAR
VAR_INPUT
    {attribute 'pytmc' := '
        pv: DevName
        io: i
    '}
	i_sDeviceName	: 	STRING:='Device'; // Name of the device requesting the transition	

    {attribute 'pytmc' := '
        pv: TransId
        io: i
    '}
    i_TransitionAssertionID    :    UDINT := 0; // Must not be 0 or EXCLUDED_ID
    {attribute 'pytmc' := '
        pv: TransBp
        io: i
    '}
    i_stTransitionAssertion : ST_BeamParams := PMPS_GVL.cst0RateBeam; //Assertion required during transition (always safer than anything inbetween)
    
    {attribute 'pytmc' := '
        pv: ReqId
        io: i
    '}
    i_nRequestedAssertionID    :    UDINT := 0; // Must not be 0 or EXCLUDED_ID
    {attribute 'pytmc' := '
        pv: ReqBp
        io: i
    '}
    i_stRequestedAssertion    :    ST_BeamParams := ( nTran := 0, neVRange := 0, nRate  := 0);// PMPS_GVL.cstSafeBeam; //Requested assertion, change whenever
    
    i_xMoving    :    BOOL := FALSE; //Provide rising edge when device begins moving <remove>
    i_xDoneMoving    :    BOOL := FALSE; //Provide rising edge when device is done with a move
    
    stCurrentBeamParameters    :    ST_BeamParams := PMPS_GVL.cstFullBeam; //Connect to current beam parameters
    
    // Rising edge to cycle back through the BPTM process. Use if something in the process timed out or failed. This will interrupt a current process
    bRetry : BOOL := FALSE; 
END_VAR
VAR_OUTPUT

    q_xTransitionAuthorized    :    BOOL := FALSE; //Rising edge indicating the device is safe to move, use as input to move execute (which requires a rising edge)

    bError : BOOL; // Set if some issue occurs within the bptm
    nErrId : UINT; // Set to non-zero to help understand the error.
    
    bDone : BOOL;
    bBusy : BOOL;
    
END_VAR

VAR
    nTargetAssertionID    :    UDINT := 0;
    stTargetAssertion    :    ST_BeamParams; // Target assertion
    nCurrentAssertionID    :    UDINT := 0;  // ID of last set state (zero until a state is reached)
    
    {attribute 'pytmc' := '
        pv: NewBP
        io: i
    '}
    xNewBP    :    BOOL;
    {attribute 'pytmc' := '
        pv: TranBP
        io: i
    '}
    xTranBP    :    BOOL;
    {attribute 'pytmc' := '
        pv: FinalBPInArb
        io: i
    '}
    xFinalBPInArb : BOOL;
    {attribute 'pytmc' := '
        pv: FinalBP
        io: i
    '}
    xFinalBP    :    BOOL;
    
    {attribute 'pytmc' := '
        pv: State
        io: i
    '}
    eBPTMState : E_BPTMState := Init;
    ePrevState : E_BPTMState := Init;
    
    xEntry : BOOL;
    rTransition : R_TRIG;
    xNewTarget : BOOL;
	
	bTransAssertionFailed : BOOL;
    bFinalAssertionFailed : BOOL;
	
	LogStrBuffer : ARRAY [0..LogBuffSize] OF STRING;
	LogBuffIdx : FB_Index := (LowerLimit:=0, UpperLimit:=LogBuffSize);
    
    nAssrtAttempt : INT; // Number of times we have tried asserting a BP set
    
    rtRetry : R_TRIG;
    
    rtError : R_TRIG;
    
    ffTimeout : FB_FastFault := (
        i_Desc := 'Preemptive requests timed out in BPTM',
        i_TypeCode := 16#A,
        i_xAutoReset := FALSE);
        
	rtDoneMoving : R_TRIG;
    bLatchDoneMoving : BOOL;
    
    bFirstMove : BOOL := TRUE;    
        
END_VAR
VAR CONSTANT
	LogBuffSize : INT := 40;
    cMaxAttempts : INT := 3;
    (* The thought here is, a BPTM needs at most 2 arbiter slots to complete a transition.
    If we're at capacity, it means some BPTM before this one has begun a transition,
    and will require at least one more arbiter spot to complete. 
    *)
    cReqArbCapacity : UDINT := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Logic for retry button
rtRetry(CLK:=bRetry);
bRetry := FALSE;

// Logic for catching Move Done rising edge
rtDoneMoving(CLK:=i_xDoneMoving);
bLatchDoneMoving S= rtDoneMoving.Q;

// Logic for interrupting BPTM and changing requests
IF nTargetAssertionID <> i_nRequestedAssertionID OR rtRetry.Q THEN
    
    bError := FALSE;
    nErrID := 0;
    
    bDone := FALSE;
    bBusy := TRUE;

    // Execute exit actions before transition back to NewTarget
    CASE eBPTMState OF
        Transitioning:
            DeauthorizeTransition();
        //CleaningUp: 
	END_CASE
        
    eBPTMState := E_BPTMState.NewTarget;
    xEntry := eBPTMState <> ePrevState;
    
END_IF

IF xEntry THEN nAssrtAttempt := 0; END_IF

rtError(CLK:=bError);

IF rtError.Q THEN
    eBPTMState := E_BPTMState.Error;
END_IF

// States
CASE eBPTMState OF
    NewTarget:
        IF xEntry THEN
            NewTarget_ENTRY();
        ELSIF xNewBP THEN
            eBPTMState := E_BPTMState.RequestBP;
        ELSE
            SetNewTarget();
        END_IF
        
    RequestBP:
        IF PMPS_PARAM.MAX_ASSERTIONS - fbArbiter.nEntryCount >= cReqArbCapacity THEN
            AssertTransitionBP();
            AssertFinalBP();
            eBPTMState := E_BPTMState.WaitForBP;
		ELSE
            LogActions('Arbiter at capacity, leaving space for other BPTM to finish.');
            nErrId := PMPS_CODES.NoRoomInArb;
            bError := TRUE;
        END_IF
    
    WaitForBP:
        WaitingForTransitionAssertion_DO();
        WaitingForFinalAssertion_DO();
        IF xTranBP AND xFinalBPInArb THEN eBPTMState := E_BPTMState.Transitioning; END_IF
        
    Transitioning:
        IF xEntry THEN
            AuthorizeTransition();
        ELSIF bLatchDoneMoving OR (bFirstMove AND i_xDoneMoving) THEN
            DeauthorizeTransition();
            eBPTMState := E_BPTMState.WaitForFinalBP;
		END_IF
        
    WaitForFinalBP:
        xFinalBP := F_SafeBPCompare(stCurrentBeamParameters, stTargetAssertion);
        IF xFinalBP THEN
            eBPTMState := E_BPTMState.CleaningUp;
        END_IF
    
    CleaningUp:
        IF xEntry THEN
            RemoveTransitionAssertion();
		ELSE
			eBPTMState := E_BPTMState.Done;
		END_IF

    Done:
        bDone := TRUE;
        bFirstMove := FALSE;
        LogActions('Returning to idle');
        eBPTMState := E_BPTMState.Idle;
    
    Error:
        bError := TRUE;    
        eBPTMState := E_BPTMState.Idle;
END_CASE

xEntry := ePrevState <> eBPTMState;
ePrevState := eBPTMState;

bDone R= bError;
bBusy R= bError OR bDone;]]></ST>
    </Implementation>
    <Action Name="AssertFinalBP" Id="{4d723d61-220d-405f-a182-a1465a63ec6c}">
      <Implementation>
        <ST><![CDATA[//q_stFinalAssertion := stTargetAssertion;

//Clearing previous target parameters
(* This is considered safe at this step as the transition
state beam parameters should always be safer than the
current or target state beam parameters
*)
IF nCurrentAssertionID <> 0 THEN
    LogActions(CONCAT('Removing previous request: ', DWORD_TO_HEXSTR(nCurrentAssertionID, 4, false)) );
    fbArbiter.RemoveRequest( nCurrentAssertionID );
END_IF

LogActions(CONCAT('Asserting target req.: ', DWORD_TO_HEXSTR(nTargetAssertionID, 4, false)) );

//Asserting target parameters
bFinalAssertionFailed := NOT fbArbiter.AddRequest(
    nTargetAssertionID,
    stTargetAssertion,
	i_sDeviceName
);

IF bFinalAssertionFailed THEN
    LogActions('Assert final failed. ');
    nAssrtAttempt := nAssrtAttempt + 1;
    IF nAssrtAttempt > cMaxAttempts THEN
        bError := TRUE;
        nErrID := PMPS_CODES.FinalAssrtFail;
    END_IF
ELSE
    // Remembering final assertionID for removal later
    nCurrentAssertionID := nTargetAssertionID;    
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="AssertTransitionBP" Id="{b83a9501-a83d-470d-a69e-33ae3b34fe7a}">
      <Implementation>
        <ST><![CDATA[
LogActions( CONCAT('Removing transition id: ', DWORD_TO_STRING(i_TransitionAssertionID)) );
fbArbiter.RemoveRequest(i_TransitionAssertionID);

LogActions( CONCAT('Requesting transition id: ', DWORD_TO_STRING(i_TransitionAssertionID)) );
bTransAssertionFailed := NOT fbArbiter.AddRequest(
    i_TransitionAssertionID,
    i_stTransitionAssertion,
	i_sDeviceName
);

IF bTransAssertionFailed THEN
    LogActions('Assert trans. failed. ');
    nAssrtAttempt := nAssrtAttempt + 1;
    IF nAssrtAttempt > cMaxAttempts THEN
        bError := TRUE;
        nErrID := PMPS_CODES.TransAssrtFail;
    END_IF    
END_IF
    ]]></ST>
      </Implementation>
    </Action>
    <Action Name="AuthorizeTransition" Id="{54c27c7d-d192-4622-86ba-b9bfdddeaf4c}">
      <Implementation>
        <ST><![CDATA[q_xTransitionAuthorized := TRUE;

bLatchDoneMoving R= q_xTransitionAuthorized;

LogActions('Authorizing transition');]]></ST>
      </Implementation>
    </Action>
    <Action Name="DeauthorizeTransition" Id="{f0778326-a9fa-4efe-a8f9-c035d4f8f750}">
      <Implementation>
        <ST><![CDATA[q_xTransitionAuthorized := FALSE;
LogActions('Deauthorizing transition');]]></ST>
      </Implementation>
    </Action>
    <Method Name="LogActions" Id="{41e851fc-2139-47b9-addb-eed4474544fc}">
      <Declaration><![CDATA[METHOD LogActions : BOOL
VAR_INPUT
	LogStr : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogStrBuffer[LogBuffIdx.IncVal()] := LogStr;]]></ST>
      </Implementation>
    </Method>
    <Action Name="NewTarget_ENTRY" Id="{74162cbe-7b3e-460c-acdc-81cb450d0fca}">
      <Implementation>
        <ST><![CDATA[xNewBP := False;]]></ST>
      </Implementation>
    </Action>
    <Action Name="RemoveTransitionAssertion" Id="{8acfecb4-62fe-4e98-9675-1b02c9445348}">
      <Implementation>
        <ST><![CDATA[//q_stTransitionAssertion := PMPS_GVL.cstFullBeam;

//Removing transition assertion
fbArbiter.RemoveRequest( i_TransitionAssertionID );

LogActions('Removing transition req');

//TODO add something to verify removal]]></ST>
      </Implementation>
    </Action>
    <Action Name="RequestBP_DO" Id="{e4b40d78-1007-4805-b1e4-301dada5f3f5}">
      <Implementation>
        <ST><![CDATA[// Request BP atomically so we know we'll finish the BPTM cycle
IF fbArbiter.nEntryCount < cReqArbCapacity THEN

    LogActions( CONCAT('Removing transition id: ', DWORD_TO_STRING(i_TransitionAssertionID)) );
    fbArbiter.RemoveRequest(i_TransitionAssertionID);
    
    LogActions( CONCAT('Requesting transition id: ', DWORD_TO_STRING(i_TransitionAssertionID)) );
    bTransAssertionFailed := NOT fbArbiter.AddRequest(
        i_TransitionAssertionID,
        i_stTransitionAssertion,
		i_sDeviceName
    );
    
    IF bTransAssertionFailed THEN
        LogActions('Assert trans. failed. ');
        nAssrtAttempt := nAssrtAttempt + 1;
        IF nAssrtAttempt > cMaxAttempts THEN
            bError := TRUE;
            nErrID := PMPS_CODES.TransAssrtFail;
        END_IF    
    END_IF
    
    

ELSE
    LogActions('Arbiter at capacity, leaving space for other BPTM to finish.');
END_IF    ]]></ST>
      </Implementation>
    </Action>
    <Action Name="SetNewTarget" Id="{9b0c4cad-05e5-418b-8504-1d8c52f619a4}">
      <Implementation>
        <ST><![CDATA[
IF F_ValidReqID(i_nRequestedAssertionID) AND
    F_ValidReqID(i_TransitionAssertionID) THEN
    
    stTargetAssertion := i_stRequestedAssertion;
    nTargetAssertionID := i_nRequestedAssertionID;
	
	LogActions('New target set');
	
    xNewBP := TRUE;
    
ELSE
    IF NOT F_ValidReqID(i_nRequestedAssertionID) THEN
        
        nErrID := PMPS_CODES.BadTargetID;
    ELSIF NOT F_ValidReqID(i_TransitionAssertionID) THEN
        nErrID := PMPS_CODES.BadTransID;
	END_IF
    LogActions('Error in set new target');
    bError := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForFinalAssertion_DO" Id="{91b8022f-8c2d-480b-800c-6fe8741ef51c}">
      <Implementation>
        <ST><![CDATA[//Final Assertion Verification

xFinalBPInArb := fbArbiter.CheckRequest( i_nRequestedAssertionID);;]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForFinalAssertion_EXIT" Id="{6032c85f-f58f-40a0-a7a9-09c0400dd89e}">
      <Implementation>
        <ST><![CDATA[//Set this bool false so we can get a rising edge on the next try
xFinalBP := FALSE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForTransitionAssertion_DO" Id="{efd5ef21-1274-446e-b4e2-eb587c706e95}">
      <Implementation>
        <ST><![CDATA[//Transition Assertion Verification
xTranBP    := F_SafeBPCompare0Rate(stCurrentBeamParameters, i_stTransitionAssertion) AND
    fbArbiter.CheckRequest(i_TransitionAssertionID);]]></ST>
      </Implementation>
    </Action>
    <Action Name="WaitingForTransitionAssertion_EXIT" Id="{97cb140a-13c7-46d0-9d70-2452731d3375}">
      <Implementation>
        <ST><![CDATA[xTranBP := FALSE;

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>