<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SubSysToArbiter_IO" Id="{98769089-e42b-4685-9f83-c90a3cb7edad}" SpecialFunc="None">
    <Declaration><![CDATA[// Use on a subsystem PLC to request from the arbiter
// Run at the top of your cycle to receive the latest BP
FUNCTION_BLOCK FB_SubSysToArbiter_IO IMPLEMENTS I_HigherAuthority
VAR_INPUT
    Reset : BOOL; // Fast fault reset
    sName : STRING := 'SubSysToArbiter';
    i_bVeto : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
    Arbiter	: FB_Arbiter;
    fbFFHWO : FB_HardwareFFOutput;
END_VAR
VAR
    {attribute 'TcLinkTo' := 'TIIB[PMPS_PRE]^IO Inputs^CurrentBP'}
    i_stCurrentBP    AT %I* :    ST_BeamParams_IO;
    {attribute 'TcLinkTo' := 'TIIB[PMPS_PRE]^IO Outputs^RequestedBP'}
    q_stRequestedBP AT %Q* :    ST_BeamParams_IO;
    {attribute 'pytmc' := 'pv: TxPDO_toggle
        io: i'}
    {attribute 'TcLinkTo' := 'TIIB[PMPS_PRE]^SYNC Inputs^TxPDO toggle'}
    xTxPDO_toggle    AT     %I* :    BIT;
    {attribute 'pytmc' := 'pv: TxPDO_state
        io: i'}
    {attribute 'TcLinkTo' := 'TIIB[PMPS_PRE]^SYNC Inputs^TxPDO state'}
    xTxPDO_state    AT    %I*    :    BIT;


    // Fast faults
    ffPMPSIO_Disconnect : FB_FastFault := (i_Desc:='Arbiter network interface disconnected or not OP',i_DevName := sName);

    // A request is not considered included until the active cohort number is >= the request cohort number.
    {attribute 'pytmc' := 'pv: RequestCohort
        io: i'}
    nRequestCohort : UDINT := 0; // Request cohort
    {attribute 'pytmc' := 'pv: ActiveCohort
        io: i'}
    nActiveCohort : UDINT := 0; // Active cohort, updated by incoming BP from arbiter PLC, in the ElevateRequest arbiter call

    fbVetoArb : FB_VetoArbiter;

    fbLog : FB_LogMessage;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Receiving current BP state
PMPS_GVL.stCurrentBeamParameters := IO_TO_BP(i_stCurrentBP);
PMPS_GVL.stCurrentBeamParameters.xValidToggle := xTxPDO_toggle; // This line must follow the one above. Sequence is important.

// Forwarding BP request for the subsystem
fbVetoArb.bVeto := i_bVeto;
fbVetoArb(HigherAuthority:=THIS^, LowerAuthority:=Arbiter, FFO:=fbFFHWO);

//Broadcasting current request
PMPS_GVL.stRequestedBeamParameters := IO_TO_BP(q_stRequestedBP);


q_stRequestedBP.xValid := TRUE; // This is set and held true here every cycle to prove the PLC on this side is still running

ffPMPSIO_Disconnect(
    i_xOK := xTxPDO_state = 0,
    io_fbFFHWO := fbFFHWO,
    i_xReset := Reset,
    i_DevName := sName,
    i_TypeCode := 6,
    i_xVetoable := FALSE
    );]]></ST>
    </Implementation>
    <Method Name="CheckRequest" Id="{27cbc3cc-3c51-453f-b2eb-a076b6901ac4}">
      <Declaration><![CDATA[METHOD CheckRequest : BOOL
VAR_INPUT
    nReqID	: DWORD;
END_VAR
VAR_INST
    xFirstTime : BOOL := TRUE;
    nId : DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check this id matches what we've seen before
IF xFirstTime THEN
    nId := nReqId;
ELSIF nId <> nReqId THEN
    fbLog(sMsg := 'SubSysToArbiter Check mismatched with a different ID', eSevr := TcEventSeverity.Error);
    RETURN;
END_IF

nActiveCohort := ULINT_TO_UDINT(i_stCurrentBP.nCohortInt);

// i_stCurrentBP.nCohortInt is incremented by the FB_ArbiterToSubSys block on the other side of the EL669* interface
CheckRequest := nRequestCohort <= nActiveCohort;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveRequest" Id="{d73fcee0-bda0-40f1-90f5-f8e021f35983}">
      <Declaration><![CDATA[METHOD RemoveRequest : BOOL
VAR_INPUT
    nReqID    :    DWORD; //StateID to remove
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Update internal BP request struct
q_stRequestedBP := BP_TO_IO(PMPS_GVL.cstFullBeam);

nRequestCohort := nRequestCohort + 1;

// Mark the current cohort id
q_stRequestedBP.nCohortInt := nRequestCohort;

RemoveRequest := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestBP" Id="{e2fc147e-ed0b-480c-b8bb-db22a7cb743b}">
      <Declaration><![CDATA[METHOD RequestBP : BOOL
VAR_INPUT
    (*StateID of state requesting beam parameter set*)
    nReqID	: DWORD;
    (*Requested beam params*)
    stReqBP	: ST_BeamParams;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check the request is coming from the same source we're used to

// Update internal BP request struct
q_stRequestedBP := BP_TO_IO(stReqBP);

nRequestCohort := nRequestCohort + 1;

// Mark the current cohort id
q_stRequestedBP.nCohortInt := nRequestCohort;

RequestBP := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>