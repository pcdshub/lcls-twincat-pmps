<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LinearDeviceStateTable" Id="{cf647613-9770-466a-9d39-8f1704ddbb4a}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block implements simple database. Data element values are stored in the hash table.  *)
{attribute 'no_check'}
FUNCTION_BLOCK FB_LinearDeviceStateTable
VAR_INPUT
    key         : DWORD := 0;(* Entry key: used by A_Lookup, A_Remove method, the key variable is also used by A_Add method *)
    putPosPtr    : POINTER TO T_HashTableEntry := 0;(* Hash table entry position pointer (used by A_Find, A_GetNext, A_GetPrev) *)
    putValue     : ST_DeviceState;(* Hash table entry value (used by A_AddHead, A_AddTail, A_Find )*)
END_VAR
VAR_OUTPUT
    bOk            : BOOL := FALSE;(* TRUE = Success, FALSE = Failed *)
    getPosPtr    : POINTER TO T_HashTableEntry := 0;(* Returned hash table entry position pointer *)
    getValue     : ST_DeviceState;(* Returned hash table entry value *)
    nCount        : UDINT := 0;(* Hash table size (number of used entries, used by A_Count) *)
END_VAR
VAR
    dataPool    : ARRAY[0..PMPS_GVL.MAX_DEVICE_STATES] OF ST_DeviceState;(* Structured data element pool *)
    entries        : ARRAY[0..PMPS_GVL.MAX_DEVICE_STATES] OF T_HashTableEntry;(* Max. number of hash table entries. The value of table entry = 32 bit integer (pointer to dataPool-array-entry) *)
    fbTable     : FB_HashTableCtrl;(* basic hash table control function block *)
    hTable         : T_HHASHTABLE;(* hash table handle *)
    pRefPtr        : POINTER TO ST_DeviceState := 0;
    indexOfElem    : ULINT;(* Integer value (max. size: x86=>32bit, x64=>64bit)*)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Action Name="A_Add" Id="{83eb29de-f625-4342-8194-cf535f4edf39}">
      <Implementation>
        <ST><![CDATA[(* Adds entry to the table *)
MEMSET( ADR( getValue ), 0, SIZEOF( getValue ) );
getPosPtr := 0;

fbTable.A_Add( hTable := hTable, key := key, putValue := 16#0000_0000(* we will set this value later *), getPosPtr=>getPosPtr, bOk=>bOk );(* Add new element to the table, getPosPtr points to the new entry *)
IF fbTable.bOk THEN(* Success *)
    fbTable.A_GetIndexAtPosPtr( hTable := hTable, putPosPtr := getPosPtr, getValue =>indexOfElem, bOk=>bOk );(* Get array index of getPosPtr entry *)
    IF fbTable.bOk THEN(* Success *)
        pRefPtr     := ADR( dataPool[indexOfElem] );(* Get pointer to the data element *)

        pRefPtr^ := putValue;(* copy application value *)

        fbTable.A_Add( hTable := hTable, key := key, putValue := pRefPtr, bOk=>bOk );(* Assign the entry value = pointer to the data element *)
        IF fbTable.bOk THEN(* Success *)
            getValue := putValue;
        END_IF
    END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Count" Id="{bc743718-a90b-4db4-967a-acb2b8219ae9}">
      <Implementation>
        <ST><![CDATA[(* Count number of used entries *)
nCount := hTable.nCount;
bOk := TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetFirst" Id="{31ccd0eb-8c41-42cc-8dcd-01ab2acaf98b}">
      <Implementation>
        <ST><![CDATA[(* Get first entry position pointer and value *)
MEMSET( ADR( getValue ), 0, SIZEOF( getValue ) );
getPosPtr := 0;

fbTable.A_GetFirst( hTable := hTable, putPosPtr := putPosPtr, getValue=>pRefPtr, getPosPtr=>getPosPtr, bOk=>bOk );
IF fbTable.bOk THEN
    getValue := pRefPtr^;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_GetNext" Id="{470bae98-4543-4f9a-a0c4-52b5867d86a2}">
      <Implementation>
        <ST><![CDATA[(* Get next entry position pointer and value *)
MEMSET( ADR( getValue ), 0, SIZEOF( getValue ) );
getPosPtr := 0;
bOk := FALSE;

IF putPosPtr = 0 THEN
    RETURN;
END_IF

fbTable.A_GetNext( hTable := hTable, putPosPtr := putPosPtr, getValue=>pRefPtr, getPosPtr=>getPosPtr, bOk=>bOk );
IF fbTable.bOk THEN
    getValue := pRefPtr^;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Lookup" Id="{7d7da9af-ad3d-4125-b695-855bcad15255}">
      <Implementation>
        <ST><![CDATA[(* Lookup for entry by key  *)
MEMSET( ADR( getValue ), 0, SIZEOF( getValue ) );
getPosPtr := 0;

fbTable.A_Lookup( key := key, hTable := hTable, putPosPtr := putPosPtr, getValue=>pRefPtr, getPosPtr=>getPosPtr, bOk=>bOk );
IF fbTable.bOk THEN
    getValue := pRefPtr^;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Remove" Id="{14a3d013-a2bb-42ef-b7f0-980196ca9516}">
      <Implementation>
        <ST><![CDATA[(* Search for entry and remove it *)
MEMSET( ADR( getValue ), 0, SIZEOF( getValue ) );
getPosPtr := 0;

fbTable.A_Remove( key := key, hTable := hTable, putPosPtr := putPosPtr, getValue=>pRefPtr, getPosPtr=>getPosPtr, bOk=>bOk );
IF fbTable.bOk THEN
    getValue := pRefPtr^;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Reset" Id="{82937c77-4df3-4671-9628-4ed8a8eb8c91}">
      <Implementation>
        <ST><![CDATA[(* Reset/initialize linked list *)
MEMSET( ADR( getValue ), 0, SIZEOF( getValue ) );
getPosPtr := 0;
bOk := F_CreateHashTableHnd( ADR( entries ), SIZEOF( entries ), hTable );(* Intialize table handle *)
fbTable.A_Reset( hTable := hTable, bOk=>bOk );
nCount := 0;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>