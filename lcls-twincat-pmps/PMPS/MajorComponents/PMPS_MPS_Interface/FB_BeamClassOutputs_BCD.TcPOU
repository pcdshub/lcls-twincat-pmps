<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_BeamClassOutputs_BCD" Id="{dbf80532-276b-48e1-be9a-f6bd5bc2e3ab}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Sets the beam class assertion lines for a given beam class.
*)
{attribute 'no_check'}
FUNCTION_BLOCK FB_BeamClassOutputs_BCD
VAR_INPUT
    BP : ST_BeamParams;
END_VAR
VAR_OUTPUT
END_VAR
VAR
    nBeamClass   :    BYTE;
    wBeamClass    :    BYTE;

    InitCounter: BYTE;
    counter    :    INT;

    // Beam class lines are restricted to 4 channels in the current design.
    // There are 16 possible beamclasses with 0 -15 with 0 no beam.
    // First out put is the LSB and bit 4 is MSB
    {attribute 'pytmc' := 'pv: BeamClassChannel
        io: i
        field: DESC Hardwire channel state'}
        epicsBitmap : WORD;

    {attribute 'TcLinkTo' := '[1] := TIIB[PMPS_Premp]^Channel 1^Output;
                              [2] := TIIB[PMPS_Premp]^Channel 2^Output;
                              [3] := TIIB[PMPS_Premp]^Channel 3^Output;
                              [4] := TIIB[PMPS_Premp]^Channel 4^Output;'}
    q_BC_ASSERTION_LINES    AT    %Q*    : ARRAY [1..MAX_BEAM_CLASS_LINES] OF    BOOL;
END_VAR
VAR CONSTANT
    //Limited to total of 4 digital outputs
    MAX_BEAM_CLASS_LINES : BYTE := 4;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//Initialize BC lines to zero on every pass
FOR InitCounter := 1 TO MAX_BEAM_CLASS_LINES DO
    q_BC_ASSERTION_LINES[InitCounter] := FALSE;
END_FOR

//Set BC lines according to beam class
// There are 4 digital outputs the BC is going to be a BCD
q_BC_ASSERTION_LINES[1] := BP.nBeamClass.0;
q_BC_ASSERTION_LINES[2] := BP.nBeamClass.1;
q_BC_ASSERTION_LINES[3] := BP.nBeamClass.2;
q_BC_ASSERTION_LINES[4] := BP.nBeamClass.3;

// Readbacks for EPICS
epicsBitmap.0 := q_BC_ASSERTION_LINES[1];
epicsBitmap.1 := q_BC_ASSERTION_LINES[2];
epicsBitmap.2 := q_BC_ASSERTION_LINES[3];
epicsBitmap.3 := q_BC_ASSERTION_LINES[4];


]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>