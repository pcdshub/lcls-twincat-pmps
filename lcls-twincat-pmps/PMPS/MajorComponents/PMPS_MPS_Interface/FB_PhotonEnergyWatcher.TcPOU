<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PhotonEnergyWatcher" Id="{36789dc0-18e8-4123-89a2-b9f452534e7c}" SpecialFunc="None">
    <Declaration><![CDATA[(*
A. Wallace 2019-4-22
The photon energy watcher ensures the current and target photon energy is within
the arbirated bounds. Target in this case means, the calculated target photon energy
from the PVs that control the mechatronics of the undulators/ the electron energy.

If there are control PVs that match the monitor PVs, the control PVs are used to
calculate a "target" photon energy. This is supposed to cover when the undulators/
electron energy is transitioning.

The abritrated bounds come from a simple AND of all the permitted ranges. See
the arbitrate action of the arbiter FB.

Note, this protection logic does not account for beam-off when determining fast-fault
status. If a device is requesting a limited range of eV, this request must be honored,
regardless of current beam-rate.
*)
{attribute 'reflection'}
FUNCTION_BLOCK FB_PhotonEnergyWatcher
VAR_INPUT
    i_stCurrentBeamParams    :    ST_BeamParams; //Link to global beam params
    i_stMachineTargetBeamParams    :    ST_BeamParams; //Link to global machine target beam params
    i_stRequestedBeamParams    :    ST_BeamParams; //Link to arbiter output or beam param. requestor
    // Reset fault
    i_xReset: BOOL;
    sName : STRING := 'PhotonEnergyWatcher';
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
    io_fbFFHWO    :    FB_HardwareFFOutput;
END_VAR
VAR
    xPhotonEnergyWithinBounds    :    BOOL;
    fbFF    :    FB_FastFault :=(
        i_DevName := sName,
        i_Desc := 'Fault occurs when the calculated machine photon energy (K value calculated by undulator gap, and electron energy) falls outside the permitted range.',
        i_TypeCode := 7 );

   {attribute 'pytmc' := '
        pv: ResidualPhotonEnergies
        io: i
        archive: 1Hz monitor
        field: DESC Portions of beam eV not permitted
        field: EGU eV-bitmask
    '}
    evResidual : DWORD;

    fbLog : FB_LogMessage := (
        eSubSystem := E_Subsystem.MPS,
        eSevr := TcEventSeverity.Critical
        );
    bLogOneShot : BOOL;
    sDevName : T_MaxString := 'Photon Energy Watcher';

    fbGetHN : FB_GetHostName;
    bInit : BOOL := TRUE;

    {attribute 'instance-path'}
    {attribute 'noinit'}
    sPath    :    T_MaxString;

    fbStr : FB_FormatString := (
        sOut := 'Non-zero photon energy residual: %32b; Req: %32b; Act: %32b');
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bInit THEN
    fbGetHN(bExecute:=TRUE);
    bInit R= NOT fbGetHN.bBusy;
END_IF

xPhotonEnergyWithinBounds := (i_stCurrentBeamParams.neVRange AND i_stRequestedBeamParams.neVRange) = i_stCurrentBeamParams.neVRange;

evResidual := (i_stCurrentBeamParams.neVRange XOR i_stRequestedBeamParams.neVRange) AND i_stCurrentBeamParams.neVRange;

IF evResidual <> 0 AND bLogOneShot THEN
    fbLog.sJson := F_PMPS_JSON(
        CONCAT(fbGetHN.sHostName, sDevName),
        sPath,
        PMPS_CODES.PEW_FAULT);

    fbStr.arg1 := F_DWORD(evResidual);
    fbStr.arg2 := F_DWORD(i_stCurrentBeamParams.neVRange);
    fbStr.arg3 := F_DWORD(i_stRequestedBeamParams.neVRange);

    fbStr();

    fbLog(sMsg:=fbStr.sOut);
    bLogOneShot := FALSE;
ELSIF evResidual = 0 THEN
    bLogOneShot := TRUE;
END_IF

fbFF(i_xOK := xPhotonEnergyWithinBounds,
    io_fbFFHWO := io_fbFFHWO,);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>