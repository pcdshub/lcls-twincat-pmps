<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_UndulatorSegment" Id="{986484f4-a7ca-4f8c-bada-b360e7740d21}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_UndulatorSegment
VAR_INPUT
    (* Undulator period in millimeters, to be set by subclasses for HXR, read by pv for SXR, left here for backward compatability *)
    fPeriod_mm : LREAL := 1.0;

    fbElectronEnergy : REFERENCE TO FB_LREALFromEPICS;

    fLowK : LREAL := 0;
    fHiK : LREAL := 6;
    fKRangeHyst : LREAL := 0.01;
END_VAR

VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: eVAct
        field: DESC Calculated photon energy
        field: PREC 3
        field: EGU eV
    '}
    fPhotonEnergyAct : LREAL;

    {attribute 'pytmc' := '
        pv: eVDes
        field: DESC Calculated desired photon energy
        field: PREC 3
        field: EGU eV
    '}
    fPhotonEnergyDes : LREAL;

    {attribute 'pytmc' := '
        pv: Active
        io: i
        field: DESC Undulator is considered active
    '}
    xActive : BOOL; // Undulator is considered active

    {attribute 'pytmc' := '
        pv: TargetActive
        io: i
        field: DESC Target K would make und active
    '}
    xTargetActive : BOOL; // Undulator is considered active at this target

    {attribute 'pytmc' := '
        pv: KAct
        io: i
        field: DESC Current K
    '}
    fKAct : LREAL;

    {attribute 'pytmc' := '
        pv: KDes
        io: i
        field: DESC Target K
    '}
    fKDes : LREAL;

    {attribute 'pytmc' := '
        pv: Lambda_U
        io: i
        field: DESC Period in m
    '}
    fLambda_U : LREAL;

    {attribute 'pytmc' := '
        pv: KActValid
        io: i
        field: DESC Current K Readback Valid
    '}
    bKActValid : BOOL;

    {attribute 'pytmc' := '
        pv: KDesValid
        io: i
        field: DESC Target K Readback Valid
    '}
    bKDesValid : BOOL;

     {attribute 'pytmc' := '
        pv: lambdaValid
        io: i
        field: DESC lambda_U Readback Valid
    '}
    blambdaValid : BOOL;


END_VAR

VAR
    {attribute 'pytmc' := '
        pv: KDes
        link: KDes
    '}
    fbKDesired : FB_LREALFromEPICS;

    {attribute 'pytmc' := '
        pv: KAct
        link: KAct
    '}
    fbKActual : FB_LREALFromEPICS;

    {attribute 'pytmc' := '
        pv: lambda_U
        link: lambda_U
    '}
    fblambda_U : FB_LREALFromEPICS;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbKDesired();
fbKActual();
fblambda_U();

fKAct := fbKActual.fValue;
bKActValid := fbKActual.bValid;
fKDes := fbKDesired.fValue;
bKDesValid := fbKDesired.bvalid;
fLambda_U := fblambda_U.fValue;
blambdaValid:= fblambda_U.bValid;

IF __ISVALIDREF(fbElectronEnergy) THEN

    IF fbKActual.bValid AND fblambda_U.bValid AND fbElectronEnergy.bValid THEN
        fPhotonEnergyAct := F_CalculatePhotonEnergy(
            fElectronEnergy_GeV:=fbElectronEnergy.fValue,
            fUndulatorPeriod_mm:=fPeriod_mm,
            fUndulatorStrength:=fbKActual.fValue
        );

        //Set this undulator active if actual K is within operational range
        xActive S= fLowK <= fbKActual.fValue AND fbKActual.fValue <= fHiK AND
        (fbKActual.bValid AND fbKActual.bValid);
        xActive R= (fLowK - fKRangeHyst) > fbKActual.fValue OR fbKActual.fValue > (fHiK + fKRangeHyst) OR
                    (NOT fbKActual.bValid OR NOT fbKActual.bValid);

        //Set this undulator active if target K is within operational range
        xTargetActive S= fLowK <= fbKDesired.fValue AND fbKDesired.fValue <= fHiK AND
        (fbKDesired.bValid AND fbKDesired.bValid);
        xTargetActive R= (fLowK - fKRangeHyst) > fbKDesired.fValue OR fbKDesired.fValue > (fHiK + fKRangeHyst) OR
                    (NOT fbKDesired.bValid OR NOT fbKDesired.bValid);
    END_IF

    IF fbKDesired.bValid AND fblambda_U.bValid AND fbElectronEnergy.bValid THEN
        fPhotonEnergyDes := F_CalculatePhotonEnergy(
            fElectronEnergy_GeV:=fbElectronEnergy.fValue,
            fUndulatorPeriod_mm:=fPeriod_mm,
            fUndulatorStrength:=fbKDesired.fValue
        );
    END_IF

END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>