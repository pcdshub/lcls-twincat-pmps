<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Arbiter" Id="{7464182c-a23a-4d85-9b4a-38e22935bfb9}" SpecialFunc="None">
    <Declaration><![CDATA[(* FB Arbiter
A. Wallace 2020-6-26

The arbiter primary objectives are:
- Provide a simple interface for devices to request beam parameter sets
- Provide a way for devices to verify their BPS is active in the arbiter
- Provide a way for devices remove their requests from evaluation
- Evaluate all active beam parameter requests registered with the aribiter,
to determine the safest combination of all sets, provide this set as an output.
- Do all of this with minimal overhead

To these ends, the arbiter uses a hash-table, the rows being a state-id as the key, and a corresponding
 beam parameter set to be evaluated against all the other sets (or rows), in the table.

The hash table can be thought of as an array on steriods, they are worth reading about, suffice to say
the hash table will tell you when you reach the end of all the entries, and enables us to find entries quickly.

These features efficiently address the addition, removal, and verification of beam parameter sets listed in the above requirements.
*)
{attribute 'reflection'}
FUNCTION_BLOCK FB_Arbiter IMPLEMENTS I_HigherAuthority, I_LowerAuthority
VAR
    nRequestsCount : UDINT; // How many requests are currently in the arbiter

    {attribute 'pytmc' := '
        pv: AP
        io: i
        field: DESC Assertion Pool
     '}
    fbBPAssertionPool    :    FB_BeamParamAssertionPool; //Table of active beam parameter assertions

    xRequestMade : BOOL; // Arbiter has confirmed its request has made it into the beam parameter request

    {attribute 'pytmc' := '
        pv: ArbiterID
        io: i
        field: DESC Arbiter ID for elev. req.
     '}
    nArbiterID : UDINT; // Arbiter ID, used for making higher-level BP requests

    nNextCohort : UDINT := 1; // The cohort ID any new requests will adopt, will become ReqInProgCohort at the start of the next acknowledgement cycle
    nAckInProgCohort : UDINT := 0; // The cohort ID currently being acknowledged, will become nActiveCohort after acknowledgement from HA
    {attribute 'pytmc' := '
        pv: CohortCounter
        io: i
        field: DESC Intrnl cohort counter
     '}
    nActiveCohort : UDINT := 0; // Requests with cohorts <= to this value will be considered active in CheckRequest

    bStartNewAckRequest : BOOL; // Set by an add or remove method call, triggers an ack cycle
    bAckInProgress : BOOL; // Set by ElevateReq when there is a new ack request and reset when the ack cycle is complete

    // The following IDs are set by the last BP request that was most conservative
    // ie. other requests may limit the parameter, but this one is the most recent to limit it
    idTransmission : DWORD; // ID of BP limiting transmission
    idRate : DWORD; // ID of BP limiting rate

    {attribute 'instance-path'}
    {attribute 'noinit'}
    sPath    :    T_MaxString;

    sArbName : T_MaxString;

    InfoStringFmtr : FB_FormatString;

    bVerbose : BOOL := FALSE;

    {attribute 'pytmc' := '
        pv: Vetoed
        io: i
        field: DESC Arbiter Veto Status
    '}
    bArbiterVetoed : BOOL := FALSE;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: ArbitratedBP
        io: i
        field: DESC Arbitrated BP
     '}
    q_stBeamParams    :    ST_BeamParams := PMPS_GVL.cstFullBeam; //Updated on each cycle of the arbiter FB with the current arbitrated beam parameter set

    q_xStateIDFound    :    BOOL; //Set true if a state-id is found in the assertion pool after calling A_VerifyAssertion
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddRequest" Id="{f6e392d1-3a4a-4d38-b38d-86d9847b5a7a}">
      <Declaration><![CDATA[// Adds a request to the arbiter pool.
// Returns true if the request was successfully added, false if not enough space or a request with the same ID is already present.
METHOD AddRequest : BOOL
VAR_INPUT
    nReqID    :    DWORD; // Unique ID within aribter for the request. Make sure this is unique for every device + state combination
    stReqBP        :    ST_BeamParams; //Requested beam params
    sDevName: STRING; // Name of the device making the request
END_VAR
VAR
    BP_Int : ST_BP_ArbInternal;
END_VAR
VAR_INST
    fbLog : FB_LogMessage;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// If the request is already in the pool, then skip the rest.
// This is flawed, needs to update the request if it's already in the pool, despite having the same ID
IF THIS^.CheckRequestInPool(nReqID)
    OR nReqID = PMPS_GVL.EXCLUDED_ASSERTION_ID
    OR nReqID = 0 THEN
    AddRequest := FALSE;
    RETURN;
END_IF


stReqBP.nCohortInt := nNextCohort; // Set the cohort number for this BP request.

// Pack the ID with the request
MEMCPY(ADR(BP_Int), ADR(stReqBP), SIZEOF(stReqBP));
BP_Int.nId := nReqID;
BP_Int.LiveInTable := TRUE;
BP_Int.sDevName := sDevName;

THIS^.fbBPAssertionPool.A_Add(
    key := nReqID,
    putValue := BP_Int
);


IF NOT THIS^.fbBPAssertionPool.bOk THEN
    fbLog(sMsg:=CONCAT('Addition to arbiter assertion pool failed ', DWORD_TO_HEXSTR(nReqID, 4, FALSE)),
            eSevr:=TcEventSeverity.Warning,
            eSubsystem:=E_Subsystem.MPS,
            sJson := F_PMPS_JSON(
                        sArbName,
                        sPath,
                        PMPS_CODES.ARB_FULL));
ELSIF THIS^.fbBPAssertionPool.bOk AND bVerbose THEN
    fbLog(sMsg:=CONCAT('Added to pool ',DWORD_TO_HEXSTR(nReqID, 4, FALSE)),
            eSevr:=TcEventSeverity.Verbose,
            eSubsystem:=E_Subsystem.MPS);
END_IF
// New request, make sure the ack cycle request flag is set
bStartNewAckRequest S= THIS^.fbBPAssertionPool.bOk;

AddRequest := THIS^.fbBPAssertionPool.bOk;

nRequestsCount := nEntryCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ArbitrateBP" Id="{a1827a5c-2882-4b86-a919-45b183561daf}">
      <Declaration><![CDATA[// Kernel of the arbiter
// Logic for determining which beam parameter is the most conservative across all request sets.
{attribute 'no_check'}
METHOD INTERNAL ArbitrateBP : ST_BP_ArbInternal
VAR_INPUT
    stBP1    :    ST_BP_ArbInternal;
    stBP2    :    ST_BP_ArbInternal;
END_VAR
VAR
    idx : UINT := 1;
    bcBitmask : WORD:=0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//<TODO>Add something here to register the key that won for each param

//Attenuation
ArbitrateBP.nTran := MIN(stBP1.nTran, stBP2.nTran);

FOR idx := 1 TO PMPS_GVL.AUX_ATTENUATORS DO
    ArbitrateBP.astAttenuators[idx].nTran := MIN(stBP1.astAttenuators[idx].nTran, stBP2.astAttenuators[idx].nTran);
END_FOR

//Apertures
FOR idx := 1 TO PMPS_GVL.MAX_APERTURES DO
    IF stBP1.astApertures[idx].Height = 0 OR stBP2.astApertures[idx].Height =0 THEN
        ArbitrateBP.astApertures[idx].Height := MAX(stBP1.astApertures[idx].Height, stBP2.astApertures[idx].Height);
    ELSE
        ArbitrateBP.astApertures[idx].Height := MIN(stBP1.astApertures[idx].Height, stBP2.astApertures[idx].Height);
    END_IF

    IF stBP1.astApertures[idx].Width = 0 OR stBP2.astApertures[idx].Width =0 THEN
        ArbitrateBP.astApertures[idx].Width := MAX(stBP1.astApertures[idx].Width, stBP2.astApertures[idx].Width);
    ELSE
        ArbitrateBP.astApertures[idx].Width := MIN(stBP1.astApertures[idx].Width, stBP2.astApertures[idx].Width);
    END_IF
END_FOR

//Photon energy ranges
ArbitrateBP.neVRange := stBP1.neVRange AND stBP2.neVRange;

//Beam Class ranges
ArbitrateBP.nBCRange := stBP1.nBCRange AND stBP2.nBCRange;

//Beam Class
//Assert the highest allowed beamclass
IF (ArbitrateBP.nBCRange = 0) THEN ArbitrateBP.nBeamClass := 0; END_IF
FOR idx:=1 TO 15 BY 1 DO
    IF (idx =1 ) THEN bcBitmask :=1; END_IF
    IF (ArbitrateBP.nBCRange AND bcBitmask) = bcBitmask THEN
        ArbitrateBP.nBeamClass := TO_USINT(idx);
    END_IF
    bcBitmask := ROL(bcBitmask,1);
END_FOR


//Rate
ArbitrateBP.nRate := MIN(stBP1.nRate, stBP2.nRate);]]></ST>
      </Implementation>
    </Method>
    <Property Name="bLowerAuthorityVetoed" Id="{eeff2e6e-6276-44ec-a1a4-ca8f886b582f}">
      <Declaration><![CDATA[PROPERTY bLowerAuthorityVetoed : BOOL
]]></Declaration>
      <Get Name="Get" Id="{7068be3e-45c7-4937-827a-e178145c11e2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bLowerAuthorityVetoed := bArbiterVetoed;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b5f44e1c-aa62-4cb9-a969-f07ead76d598}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bArbiterVetoed := bLowerAuthorityVetoed;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="CheckRequest" Id="{a64ed6c5-2c93-405e-97a2-fa37d439d3b2}">
      <Declaration><![CDATA[(* Checks request ID is included in arbitration all the way to the accelerator interface
Use like so:
IF fbArbiter.CheckRequest(nStateIDAssertionToCheck) AND (other logic) THEN:
    Request is found and active in arbitration,. Do something.
ELSE:
    Request was not found, or is not yet included in arbitration. Don't do something/ wait.

*)
METHOD CheckRequest : BOOL
VAR_INPUT
    nReqID    :    DWORD;
END_VAR
VAR
    BP : ST_BeamParams;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbBPAssertionPool.A_Lookup(key := nReqID);

// Verify BP is acknowledged
BP := fbBPAssertionPool.getValue;

// This logic:
// Did we find the assertion in the pool?
// Is the assertion cohort number less than the current cohort and greater than zero?
// Is the Aribter itself active in arbitration?
CheckRequest := fbBPAssertionPool.bOk AND
                BP.nCohortInt <= nActiveCohort AND
                BP.nCohortInt > 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckRequestInPool" Id="{f0776990-a211-400b-9974-8651dfd1d437}">
      <Declaration><![CDATA[// Verify request is at least in the local arbiter
// Does not verify request has been included in arbitration.
// Use CheckRequest instead.
METHOD CheckRequestInPool : BOOL
VAR_INPUT
    nReqID    :    DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbBPAssertionPool.A_Lookup(key := nReqID);

CheckRequestInPool := THIS^.fbBPAssertionPool.bOk;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ElevateRequest" Id="{7ff662cb-d23f-49f5-854d-1d5b340251d9}">
      <Declaration><![CDATA[// <Arbiter Internal>
// Elevates the arbitrated BP set to something above.
// Could be another arbiter, or a BP requester/ IO,
// or an FB that locks in a specific portion of the BP set.
METHOD ElevateRequest : BOOL
VAR_INPUT
    HigherAuthority : I_HigherAuthority;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
This method should only be used with one higher level component.
*)

// Complete previous ack cycle
IF bAckInProgress THEN
    IF HigherAuthority.CheckRequest(nReqID := nArbiterID) THEN
        nActiveCohort := nAckInProgCohort;
        bAckInProgress := FALSE;
    END_IF
END_IF

// Kick off another ack cycle
IF bStartNewAckRequest AND NOT bAckInProgress THEN
    nAckInProgCohort := nNextCohort;
    HigherAuthority.RemoveRequest(nReqID:= nArbiterID);
    bAckInProgress := HigherAuthority.RequestBP(nReqID := nArbiterID, stReqBP := GetArbitratedBP());
    IF bAckInProgress THEN
        bStartNewAckRequest := FALSE;
        nNextCohort := nNextCohort + 1;
    END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c4038514-f5a2-484f-a41c-567aa0b6c31b}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    nID : DWORD := PMPS_GVL.EXCLUDED_ASSERTION_ID; // Arbiter ID, must be globally unique cannot be zero or 16#FFFF
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nArbiterID := nId;
fbBPAssertionPool.A_Reset();

sArbName := CONCAT('Arbiter ID: 0x', DWORD_TO_HEXSTR(nID, 4, FALSE));]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetArbitratedBP" Id="{aa6541e9-3c4b-40dc-96cf-1afc4ec47cdb}">
      <Declaration><![CDATA[// Executes Arbitration between all requested beam parameter sets
METHOD INTERNAL GetArbitratedBP : ST_BeamParams
VAR_INPUT
END_VAR
VAR
    getPosPtr    : POINTER TO T_HashTableEntry := 0;
    getBPStructInt    :    ST_BP_ArbInternal;
    stOutputBP    :    ST_BP_ArbInternal; //Holding struct for arbitration process
END_VAR
VAR_INST
    xFirstPass : BOOL := TRUE;
    fbGetCurTaskIdx : GETCURTASKINDEX;
    LastCycleCount : UDINT;
    fbLogMessage : FB_LogMessage;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Arbitrate
(*
This step cycles through every hash table entry, comparing
the beam parameters from each assertion to what we're planning
to assert.

The safer of the two parameters is kept so at the end we may
have a mix of beam parameters, the composition being safe for
all asserters.

*)

THIS^.fbBPAssertionPool.A_GetFirst( putPosPtr := 0, getPosPtr=>getPosPtr, getValue=>getBPStructInt );
IF THIS^.fbBPAssertionPool.bOk THEN //If the table is empty (not OK), we are left with the default stOutputBP set above.

    //The first entry in the hash table is taken as the setting to arbitrate against
    stOutputBP := getBPStructInt;

    REPEAT
        THIS^.fbBPAssertionPool.A_GetNext( putPosPtr := THIS^.fbBPAssertionPool.getPosPtr, getPosPtr=>getPosPtr, getValue=>getBPStructInt );
        IF THIS^.fbBPAssertionPool.bOk THEN
            stOutputBP := ArbitrateBP(stOutputBP, getBPStructInt);
        END_IF
    UNTIL NOT fbBPAssertionPool.bOk
    END_REPEAT
ELSE
    //Full beam if there are no arbitration requests
    MEMCPY(ADR(stOutputBP), ADR(PMPS_GVL.cstFullBeam), SIZEOF(PMPS_GVL.cstFullBeam));
END_IF

MEMCPY(ADR(q_stBeamParams),ADR(stOutputBP), SIZEOF(q_stBeamParams));

GetArbitratedBP := stOutputBP;

GetArbitratedBP.xValidToggle := NOT GetArbitratedBP.xValidToggle;

xFirstPass := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="nEntryCount" Id="{69cbd72e-a198-4efd-872d-53cc3bb7c334}">
      <Declaration><![CDATA[// How many entries are in the arbiter now
PROPERTY nEntryCount : UDINT]]></Declaration>
      <Get Name="Get" Id="{d25a2080-a286-42b6-ae86-fa04a141b063}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fbBPAssertionPool.A_Count();
IF fbBPAssertionPool.bOk THEN
    nEntryCount := fbBPAssertionPool.nCount ;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="nLowerAuthorityID" Id="{1fc1fd51-255d-436a-8bc9-caa51a4c9d82}">
      <Declaration><![CDATA[PROPERTY nLowerAuthorityID : DWORD]]></Declaration>
      <Get Name="Get" Id="{30bc21b7-6ca8-40ff-b8a0-c2f0cc071beb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nLowerAuthorityID := nArbiterID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RemoveRequest" Id="{79807308-416c-48f2-9db0-385196c0e213}">
      <Declaration><![CDATA[(* Removes request from abritration. *)
METHOD RemoveRequest : BOOL
VAR_INPUT
    nReqId    :    DWORD;
END_VAR
VAR_INST
    fbLog : FB_LogMessage;
END_VAR
VAR CONSTANT
    BP_Int : ST_BP_ArbInternal := (nId:=0, LiveInTable:=FALSE);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nReqId <> PMPS_GVL.EXCLUDED_ASSERTION_ID AND CheckRequestInPool(nReqId) THEN
    // Include an A_Add action here to
    // update this entry with a dummy filler (ID = 0, LiveInTable= False)
    // before removing it since this hash
    // table needs to be viewed with a diagnostic
    // and so the entries need to appear clean.
    THIS^.fbBPAssertionPool.A_Add(key := nReqID, putValue := BP_Int);
    THIS^.fbBPAssertionPool.A_Remove(key := nReqId);

    IF bVerbose THEN
        IF THIS^.fbBPAssertionPool.bOk THEN
                fbLog(sMsg:=CONCAT('Removed from pool: ', DWORD_TO_HEXSTR(nReqID,4,FALSE)),
                eSevr:=TcEventSeverity.Verbose,
                eSubsystem:=E_Subsystem.MPS);
        ELSE
            fbLog(sMsg:=CONCAT('Failed to remove from pool: ', DWORD_TO_HEXSTR(nReqID,4,FALSE)),
                eSevr:=TcEventSeverity.Warning,
                eSubsystem:=E_Subsystem.MPS);
        END_IF
    END_IF

    // With any new request reset the internal arbiter "done" flag
    bStartNewAckRequest S= THIS^.fbBPAssertionPool.bOk;

    RemoveRequest := THIS^.fbBPAssertionPool.bOk;

    nRequestsCount := nEntryCount;

END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestBP" Id="{d19219fe-34dd-4096-83ea-674a98690de1}">
      <Declaration><![CDATA[METHOD RequestBP : BOOL
VAR_INPUT
    (*StateID of state requesting beam parameter set*)
    nReqID	: DWORD;
    (*Requested beam params*)
    stReqBP	: ST_BeamParams;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RequestBP := AddRequest(nReqID := nReqID, stReqBP := stReqBP, sDevName:=sArbName);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>