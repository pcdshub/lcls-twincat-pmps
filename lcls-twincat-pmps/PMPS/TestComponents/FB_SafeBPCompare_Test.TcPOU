<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SafeBPCompare_Test" Id="{8a1c9dec-d419-4671-8e9f-3bf503fe2c8f}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_SafeBPCompare_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[BeamOffIsSafe();
BPComparisonCheck();]]></ST>
    </Implementation>
    <Method Name="BeamOffIsSafe" Id="{baafb4a0-1daf-4334-8116-72ea06a2d1cd}">
      <Declaration><![CDATA[//Verify beam off is considered safe.
METHOD BeamOffIsSafe
VAR_INPUT
END_VAR
VAR
    stBeamOn_MoreConservative    :    ST_BeamParams;
    stBeamOff_LessConservative    :    ST_BeamParams;
    stBeam0Rate    :    ST_BeamParams;
    stBeam0BC    :    ST_BeamParams;
    fb_BeamClassOutputs_BCD:FB_BeamClassOutputs_BCD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stBeamOn_MoreConservative  := F_SetBeamParams(
    0, //0% transmission is more conservative than 50
    16#FFFF_FFFF,
    120, //rate
    16#0001,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stBeamOff_LessConservative:= F_SetBeamParams(
    0.5, //50% transmission, less conservative, without 0-rate this beam parameter set would be less safe than above
    16#FFFF_FFFF,
    0, //rate, hence, more conservative
    16#000F,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); //0 beam rate means this bps is actually safer than BeamOn

// Set Machine Mode to NC
PMPS_GVL.stCurrentBeamParameters.nMachineMode := 0;

TEST('BeamOffIsSafeNC');

AssertTrue(
    F_SafeBPCompare0Rate(stBeamOff_LessConservative, stBeamOn_MoreConservative),
    'SafeBPCompare in NC does not think beam rate = 0 is safer than anything else.');
TEST_FINISHED();


TEST('BeamClass0IsNOTSafeNC');


stBeam0BC  := F_SetBeamParams(
    1, //0% transmission is more conservative than 50
    16#FFFF_FFFF,
    1000, //rate
    16#0000,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);


AssertFalse(
    F_SafeBPCompare0Rate(stBeam0BC, stBeamOn_MoreConservative),
    'SafeBPCompare beam class = 0 is NOT safer than anything else in NC mode.');
TEST_FINISHED();




//SC tests
stBeamOn_MoreConservative  := F_SetBeamParams(
    0, //0% transmission is more conservative than 50
    16#FFFF_FFFF,
    0, //rate
    16#000F,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stBeamOff_LessConservative:= F_SetBeamParams(
    0.5, //50% transmission, less conservative, without 0-rate this beam parameter set would be less safe than above
    16#FFFF_FFFF,
    1000,
    16#0000, //zero beam, hence, more conservative
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); //0 beam rate means this bps is actually safer than BeamOn

// Set Machine Mode to SC
PMPS_GVL.stCurrentBeamParameters.nMachineMode := 1;

TEST('BeamOffIsSafeSC');

AssertTrue(
    F_SafeBPCompare0Rate(stBeamOff_LessConservative, stBeamOn_MoreConservative),
    'SafeBPCompare in SC mode does not think beam class = 0 is safer than anything else.');
TEST_FINISHED();

TEST('Beam0RateIsNOTSafeSC');


stBeam0Rate  := F_SetBeamParams(
    1, //0% transmission is more conservative than 50
    16#FFFF_FFFF,
    0, //rate
    16#00FF,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);


AssertFalse(
    F_SafeBPCompare0Rate(stBeam0Rate, stBeamOn_MoreConservative),
    'SafeBPCompare beam rate = 0 is NOT safer than anything else in SC mode.');
TEST_FINISHED();


// Set Machine Mode to Misconfigured
PMPS_GVL.stCurrentBeamParameters.nMachineMode := 2;
TEST('WrongMachineMode');

AssertFalse(
    F_SafeBPCompare0Rate(stBeam0Rate, stBeam0BC),
    'SafeBPCompare in Misconfigured mode does not think beam rate = 0 is safer than anything else.');

AssertFalse(
    F_SafeBPCompare0Rate(stBeam0BC, stBeam0Rate),
    'SafeBPCompare in Misconfiigured mode does not think beam class = 0 is safer than anything else.');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="BPComparisonCheck" Id="{204e7277-8e23-4c94-9e2b-614a24b72a02}">
      <Declaration><![CDATA[//Verify BP comparison remains logical.
{attribute 'no_check'}
METHOD BPComparisonCheck
VAR_INPUT
END_VAR
VAR
    stSafer    :    ST_BeamParams;
    stNotSoSafe    :    ST_BeamParams;
    idx : UINT;

    xResult : BOOL;
    xFailedTest : BOOL; // To exit loops early
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Test in NC mode
PMPS_GVL.stCurrentBeamParameters.nMachineMode :=0;

TEST('BPComparisonTran');
//Attenuation
stSafer := F_SetBeamParams(
    0.51, //
    16#FFFFFFFF,
    1,
    16#0000,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stNotSoSafe := F_SetBeamParams(
    0.62, //
    16#FFFFFFFF,
    1,
    16#0000,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Attenuation eval is broken (True)');

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Attenuation eval is broken (False)');

// Check at margin threshold
stSafer.nTran := 0.99 * stNotSoSafe.nTran*(PMPS_GVL.TRANS_SCALING_FACTOR + PMPS_PARAM.TRANS_MARGIN)/PMPS_GVL.TRANS_SCALING_FACTOR;
AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Attenuation eval is broken: should be safe up to margin.');

stSafer.nTran := 1 + stNotSoSafe.nTran*(PMPS_GVL.TRANS_SCALING_FACTOR + PMPS_PARAM.TRANS_MARGIN)/PMPS_GVL.TRANS_SCALING_FACTOR;

AssertFalse(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Attenuation eval is broken (False): should not be safe at all past margin');

TEST_FINISHED();



//Attenuator array
TEST('BPComparisonTranArray');

stSafer := F_SetBeamParams(
    0, //
    16#FFFFFFFF,
    1,
    16#0000,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stNotSoSafe := F_SetBeamParams(
    0, //
    16#FFFFFFFF,
    1,
    16#000F,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

FOR idx:=1 TO PMPS_GVL.AUX_ATTENUATORS DO
    stSafer.astAttenuators[idx].nTran := 0.00500;
    stNotSoSafe.astAttenuators[idx].nTran := 0.00600;

    xResult := F_SafeBPCompare(stSafer, stNotSoSafe);

    AssertTrue(
    xResult,
    'Attenuation array eval is broken (True)');

    xFailedTest S= NOT xResult;

    xResult := F_SafeBPCompare(stNotSoSafe, stSafer);
    AssertFalse(
    xResult,
    'Attenuation array eval is broken (False)');

    xFailedTest S= xResult;

    // Check at margin threshold
        stSafer.astAttenuators[idx].nTran := stNotSoSafe.astAttenuators[idx].nTran*(PMPS_GVL.TRANS_SCALING_FACTOR + PMPS_PARAM.TRANS_MARGIN)/PMPS_GVL.TRANS_SCALING_FACTOR;

        xResult := F_SafeBPCompare(stSafer, stNotSoSafe);

        AssertTrue(
            xResult,
            'Attenuation eval is broken: should be safe up to margin.');
        xFailedTest S= NOT xResult;

        stSafer.astAttenuators[idx].nTran := 1 + stNotSoSafe.astAttenuators[idx].nTran*(PMPS_GVL.TRANS_SCALING_FACTOR + PMPS_PARAM.TRANS_MARGIN)/PMPS_GVL.TRANS_SCALING_FACTOR;

        xResult := F_SafeBPCompare(stSafer, stNotSoSafe);
        AssertFalse(
            xResult,
            'Attenuation eval is broken (False): should not be safe at all past margin');
        xFailedTest S= xResult;
    //////////////////////
    IF xFailedTest THEN
        stSafer.astAttenuators[idx].nTran := 0;
        stNotSoSafe.astAttenuators[idx].nTran := 0;
        xFailedTest := FALSE;
        EXIT; // Exit this loop on the first failure.
    END_IF

    stSafer.astAttenuators[idx].nTran := 0;
    stNotSoSafe.astAttenuators[idx].nTran := 0;

END_FOR

TEST_FINISHED();

stSafer.astAttenuators[idx].nTran := 0;
stNotSoSafe.astAttenuators[idx].nTran := 0;

//Aperture array
TEST('BPComparisonApertureArray');

FOR idx:=1 TO PMPS_GVL.MAX_APERTURES DO
    // Height
    stSafer.astApertures[idx].Height := 30; // narrower is safer
    stNotSoSafe.astApertures[idx].Height := 50;

    AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Aperture array eval is broken on height (True)');

    AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Aperture array eval is broken on height (False)');

    IF NOT F_SafeBPCompare(stSafer, stNotSoSafe) or F_SafeBPCompare(stNotSoSafe, stSafer) THEN
        EXIT; // Exit this loop on the first failure.
    END_IF

    stSafer.astApertures[idx].Height := 0;
    stNotSoSafe.astApertures[idx].Height := 0;

    // Width
    stSafer.astApertures[idx].Width := 30; // narrower is safer
    stNotSoSafe.astApertures[idx].Width := 50;

    AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Aperture array eval is broken on width (True)');

    AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Aperture array eval is broken on width (False)');

    IF NOT F_SafeBPCompare(stSafer, stNotSoSafe) or F_SafeBPCompare(stNotSoSafe, stSafer) THEN
        EXIT; // Exit this loop on the first failure.
    END_IF

    stSafer.astApertures[idx].Width := 0;
    stNotSoSafe.astApertures[idx].Width := 0;


END_FOR

TEST_FINISHED();

//Rate
TEST('BPComparisonRate');
stSafer := F_SetBeamParams(
    0,
    16#FFFF_FFFF,
    1,
    16#0000,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); //

stNotSoSafe := F_SetBeamParams(
    0,
    16#FFFF_FFFF,
    10,
    16#0001,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY); //

AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Rate eval is broken (True)');

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Rate eval is broken (False)');
TEST_FINISHED();

//Pulse energy
(*
TEST('BPComparisonPulseEnergy');
stSafer := F_SetBeamParams(
    0,
    1, //
    16#FFFF,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stNotSoSafe := F_SetBeamParams(
    0,
    10, //
    16#FFFF,
    1,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);
    *)
AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Pulse energy eval is broken (True)');

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Pulse energy eval is broken (False)');
TEST_FINISHED();

//Photon energy
//More extensive tests elsewhere
TEST('BPComparisonPhotonEnergy');
stSafer := F_SetBeamParams(
    0,
    2#0000_0000_0000_0000_0000_0000_0000_0010,
    1,
    16#0000,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

stNotSoSafe := F_SetBeamParams(
    0,
    2#0000_0000_0000_0000_0000_0000_0000_0110,
    1,
    16#0001,
    PMPS_GVL.DUMMY_AUX_ATT_ARRAY);

AssertTrue(
    F_SafeBPCompare(stSafer, stNotSoSafe),
    'Photon energy eval is broken (True)');

AssertFalse(
    F_SafeBPCompare(stNotSoSafe, stSafer),
    'Photon energy eval is broken (False)');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>