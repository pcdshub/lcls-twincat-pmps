<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_VetoArbiter_Test" Id="{daba1fa5-6e89-42bf-806d-ba0ef2cd7891}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_VetoArbiter_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
VAR CONSTANT
    ArbID : DWORD := 1;
    HigherArbID : DWORD := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[VetoArbiter();]]></ST>
    </Implementation>
    <Method Name="VetoArbiter" Id="{a5c8ad88-db82-4ef4-9e88-b2188ba974f3}">
      <Declaration><![CDATA[METHOD VetoArbiter

VAR_INPUT
END_VAR
VAR
    nId    :    DWORD := 1;
    nId2 : DWORD := 10;
    stReq    :  ST_BeamParams := (nTran:=0.12);
    stReq2	:	ST_BeamParams := (nTran:=0.10);
END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);

    fbHigherArb : FB_Arbiter(2);

    ArbBP : ST_BeamParams:=(nTran:=1);

    VetoArb : FB_VetoArbiter;

    FFO : FB_HardwareFFOutput;

    fbHA : FB_DummyHA;

END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('VetoNotIn');
fbArbiter.AddRequest(nReqID:=nId, stReqBP:=stReq, sDevName :='Device');

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := FALSE;
VetoArb(HigherAuthority:=fbHigherArb,
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := FALSE;
VetoArb(HigherAuthority:=fbHigherArb,
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

AssertTrue(fbHigherArb.q_stBeamParams.nTran = stReq.nTran, 'We should see the transmission number here, veto device is not in');
AssertFalse(fbArbiter.bLowerAuthorityVetoed, 'When bVeto is FALSE the lower authority should not be vetoed.');
TEST_FINISHED();

TEST('VetoIn');
// Veto device is in
// This should effectively remove the fbArbiter request from the higher arbiter pool

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := TRUE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := TRUE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

AssertTrue(fbHigherArb.q_stBeamParams.nTran = PMPS_GVL.cstFullBeam.nTran, 'Veto device is in, trans should be restored to 100');
AssertTrue(fbArbiter.CheckRequest(nId), 'Request should still be considered valid (1)');
AssertFalse(fbHigherArb.CheckRequest(ArbID), 'Lower arb request should be gone from the higher pool');
AssertTrue(fbArbiter.bLowerAuthorityVetoed, 'When bVeto is TRUE the lower authority should be vetoed.');

TEST_FINISHED();

TEST('AnotherRequest');
// Another request is added, should be approved immediately, and with no effect on the final set
fbArbiter.RequestBP(nReqID := nId2, stReqBP:=stReq2);

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := TRUE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := TRUE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

AssertTrue(ArbBP.nTran = PMPS_GVL.cstFullBeam.nTran, 'Veto device remained in, trans should still be 100');
AssertTrue(fbArbiter.CheckRequest(nId), 'Request should still be considered valid (2)');
AssertTrue(fbArbiter.CheckRequest(nId2), '2nd Request should be considered valid');

TEST_FINISHED();

TEST('RemoveVeto');
// Removal of veto device, should produce a fault
//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := FALSE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

AssertFalse(VetoArb.ffKeepItSecretKeepItSafe.i_xOK, 'Should produce a fast fault at this point because the request is not yet back in the pool');

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := FALSE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := FALSE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

//////////////////// Cycle
fbHigherArb.ElevateRequest(fbHA);

VetoArb.bVeto := FALSE;
VetoArb(HigherAuthority:=fbHigherArb, // Veto removed
    LowerAuthority:=fbArbiter,
    FFO:=FFO);

AssertTrue(VetoArb.ffKeepItSecretKeepItSafe.i_xOK, 'Fault should be gone.');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>