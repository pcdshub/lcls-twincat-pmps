<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Arbiter_Test" Id="{33ac0bc1-5ef2-4a28-bd81-83e3f5956062}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_Arbiter_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Arbitration();
RequestCheckRemoveBP();
FullArbitrationStack();
StackArbiters();
RemoveReq();
DoS();]]></ST>
    </Implementation>
    <Method Name="ArbiterCapacity" Id="{f24e572d-11ee-48d8-ae26-2ae1990f129e}">
      <Declaration><![CDATA[METHOD ArbiterCapacity
VAR_INPUT
END_VAR
VAR
    nId    :    DWORD := 1;
    stReq    :    ST_BeamParams := (nTran:=12);

    nRandID : DWORD;
    testReq : ST_BeamParams := (neVRange := 16#FFEE, nRate:=33);

    idx : DWORD;

END_VAR
VAR_INST
    fbArbCapacityTest    :    FB_Arbiter(1);

    Cycle : INT := 0;

    CycleLimit : INT := 20;

END_VAR
VAR CONSTANT
    SysID : DWORD := 42;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Arbiter Capcity');
    // Fill the arbiter
    FOR idx := 1 TO PMPS_PARAM.MAX_ASSERTIONS DO
        fbArbCapacityTest.AddRequest(nReqID := idx, stReqBP := testReq, sDevName:= CONCAT('Device #', TO_STRING(idx)));
    END_FOR

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Arbitration" Id="{c3caf704-ac1c-41da-98d7-fd2af820601b}">
      <Declaration><![CDATA[METHOD Arbitration
VAR_INPUT
END_VAR
VAR

     nTranReqID    :    UDINT    := 1;
    stAttReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;

    nPPEReqID    :    UDINT    := 2;
    stPPEReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;

    nEVReqID    :    UDINT    := 3;
    stEVReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;

    nRateReqID    :    UDINT    := 4;
    stRateReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;

    nBCRangeReqID : UDINT    := 5;
    stBCReqBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;

    stArbitratedBP    :    ST_BeamParams;// :=  PMPS_GVL.cstFullBeam;;
    stExpectedBP    :    ST_BeamParams := PMPS_GVL.cstFullBeam;

END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Arbitration');

stAttReqBP.nTran := 0.50;
stEVReqBP.neVRange := 2#1111_1111_1111_1111_1111_1100_1111_1111;
stRateReqBP.nRate := 10;
stBCReqBP.nBCRange := 2#0111_0000_0000_0000;
stBCReqBP.nBeamClass := 15;

stExpectedBP.nTran     := stAttReqBP.nTran;
stExpectedBP.neVRange := stEVReqBP.neVRange;
stExpectedBP.nRate := stRateReqBP.nRate;
stExpectedBP.nBCRange := stBCReqBP.nBCRange;
stExpectedBP.nBeamClass := stBCReqBP.nBeamClass;


//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nTranReqID, stAttReqBP, sDevName:= 'Device' ),
                    'Safest attenuation request failed to load');

//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nPPEReqID, stPPEReqBP, sDevName:= 'Device'),
                    'Safest PPE request failed to load');

//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nEVReqID, stEVReqBP, sDevName:= 'Device'),
                    'Safest stEVReqBP request failed to load');

//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nRateReqID, stRateReqBP, sDevName:= 'Device'),
                    'Safest stRateReqBP request failed to load');

//Load arbiter with beam parameter sets
AssertTrue(fbArbiter.AddRequest(nBCRangeReqID, stBCReqBP, sDevName:= 'Device'),
                    'Safest stBCReqBP request failed to load');

stArbitratedBP := fbArbiter.GetArbitratedBP();

AssertFalse(F_DifferentBeamParams(stExpectedBP, stArbitratedBP),
                'Arbitrated BP does not match expected.');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoS" Id="{24ac30e6-5d2c-49e1-805c-d238fae62a1b}">
      <Declaration><![CDATA[METHOD DoS
VAR



    nOrigReqID : UDINT := 30;
    nSecondReqID : UDINT := 35;

    nPeskyReqID : UDINT := 40;


END_VAR
VAR_INST
    DosArb : FB_Arbiter(20);

    DummyHA : FB_DummyHA := (ReqAcknowledged:=FALSE); // Set req ack false to start so we can control when it is verified
    nTimeoutCounter : UINT;
    bInit : BOOL;
    bSecond : BOOL;
    eDosTestCases : E_ArbDosTestStates;
END_VAR
VAR CONSTANT
        nTimeoutCounterMAX : UINT := 50;
        nWaitCount : UINT := 10;
        nWait2ndCount : UINT := nWaitCount + 5;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('DoS');

CASE eDosTestCases OF
    E_ArbDosTestStates.Init: // Init, first request
        DosArb.AddRequest(nOrigReqID, PMPS_GVL.cst0RateBeam, sDevName:= 'Device');
        eDosTestCases := E_ArbDosTestStates.SecondReq;

    E_ArbDosTestStates.SecondReq: // Add second request
        DosArb.AddRequest(nSecondReqID, PMPS_GVL.cst0RateBeam, sDevName:= 'Device');
        eDosTestCases := E_ArbDosTestStates.WaitForAck;

    E_ArbDosTestStates.WaitForAck:
        IF nTimeoutCounter > nWaitCount THEN
            DummyHA.ReqAcknowledged := TRUE;
            eDosTestCases := E_ArbDosTestStates.WaitFor2ndAck;
        END_IF

    E_ArbDosTestStates.WaitFor2ndAck:
        DummyHA.ReqAcknowledged := False;
        IF nTimeoutCounter > nWait2ndCount THEN
            DummyHA.ReqAcknowledged := TRUE;
            eDosTestCases := E_ArbDosTestStates.RunAsserts;
        END_IF

END_CASE

DosArb.ElevateRequest(DummyHA);

// Pesky request always adding and removing
DosArb.RemoveRequest(nPeskyReqID);
DosArb.AddRequest(nPeskyReqID, PMPS_GVL.cst0RateBeam, sDevName:= 'Device');


nTimeoutCounter := nTimeoutCounter + 1;

IF nTimeoutCounter > nTimeoutCounterMAX or eDosTestCases = E_ArbDosTestStates.RunAsserts THEN
    AssertTrue(DosArb.CheckRequest(nOrigReqID), 'Original request still not accepted');
    AssertTrue(DosArb.CheckRequest(nSecondReqID), 'Second request still not accepted');

    TEST_FINISHED_NAMED('DoS');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FullArbitrationStack" Id="{17fe9309-58be-432c-a642-5a1fae576773}">
      <Declaration><![CDATA[{attribute 'no_check'}
METHOD FullArbitrationStack
VAR_INPUT
END_VAR
VAR
    nId    :    DWORD := 1;
    stReq    :    ST_BeamParams := (nTran:=12);

    nIdDoS : DWORD := 13;
    stDoSReq : ST_BeamParams := PMPS_GVL.cstFullBeam;
END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);

    fbHigherArb : FB_Arbiter(2);

    fbSubSysToArb : FB_SubSysToArbiter_IO; // Subsystem interface with beamline arbiter PLC
    pBPR : POINTER TO ST_BeamParams_IO;

    fbArbToSubSys : FB_ArbiterToSubSys_IO := (RequestingSystemID:=42); // Beamline arbiter PLC interface with subsystems
    pBPC : POINTER TO ST_BeamParams_IO;

    fbBPR : FB_BPRequestor; // Use in the arbiter PLC to apply an arbitrated beam parameter set to the accelerator interface

    FFO : FB_HardwareFFOutput; // Dummy FFO not important for these tests

    Cycle : INT := 0;

    CycleLimit : INT := 20;

END_VAR
VAR CONSTANT
    SysID : DWORD := 42;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// This simulates a synchronous cycle between the subsystem and arbiter PLC cycles. Ie. phase is locked, and cycle time is the same. This is not always the case, so these tests should be
// trusted with a grain of salt.

TEST('FullStack');



CASE Cycle OF

0:
    IF NOT fbArbiter.CheckRequestInPool(nID) THEN
        AssertTrue(fbArbiter.AddRequest(nId, stReq,'Device'), 'Arbiter returned false from AddRequest'); // some device asking its local arbiter for some beam parameters
    END_IF

    TEST('JustEnteredRequest');
    AssertFalse(fbArbiter.CheckRequest(nId),
        'Check should fail. Request not arbitrated yet.');
    TEST_FINISHED();

8000:
    TEST_FINISHED_NAMED('FullStack');

END_CASE


TEST('VerifyBPRHasBP');
IF fbHigherArb.CheckRequest(SysID) THEN
    AssertFalse(F_DifferentBeamParams(stReq, fbBPR.q_ReqBP),
        'Beam parameters not fully propagated to BPR at highest level');
        TEST_FINISHED_NAMED('VerifyBPRHasBP');
END_IF

TEST('ArbToSubsysPropagation');
IF fbArbToSubSys.nActiveCohort = fbArbToSubSys.nRequestedCohort
    AND fbArbToSubSys.nActiveCohort <> 0 THEN
    AssertTrue(fbHigherArb.CheckRequest(SysID),
        'Active cohort = Requested cohort before higher arbiter confirmed request was active');
    TEST_FINISHED_NAMED('ArbToSubsysPropagation');
END_IF

TEST('SubsysToArbPropagation');
IF fbArbiter.CheckRequest(nId) THEN
    AssertTrue(fbSubSysToArb.nActiveCohort >= fbSubSysToArb.nRequestCohort,
        'Request validated before higher level confirmation');
    TEST_FINISHED_NAMED('SubsysToArbPropagation');
END_IF


TEST('VerifyIncludedAtAllLevels');
IF fbArbiter.CheckRequest(nId) THEN
    AssertTrue(fbHigherArb.CheckRequest(fbArbToSubSys.RequestingSystemID), 'HigherArb is not yet included in arbitration');
    AssertTrue(fbSubSysToArb.CheckRequest(fbArbiter.nLowerAuthorityID), 'Local Arb is not yet included in arbitration');
    TEST_FINISHED_NAMED('VerifyIncludedAtAllLevels');
END_IF


///////////////////////////////////////
//Sub system cycle
fbSubSysToArb(Arbiter := fbArbiter, fbFFHWO := FFO);
//END of sub system cycle
///////////////////////////////////////

//Ethercat transfer simulation
// Transfer of requested BP to arbiter PLC
pBPR := ADR(fbArbToSubSys.i_RequestedBP);
pBPR^ := fbSubSysToArb.q_stRequestedBP;

// Transfer of current BP to sub system PLC
pBPC := ADR(fbSubSysToArb.i_stCurrentBP);
pBPC^ := fbArbToSubSys.o_CurrentBP;

//////////////////////////////////////
//Start of arbiter plc cycle
//Arb io collects sub system status
fbArbToSubSys(Arbiter := fbHigherArb, fbFFHWO := FFO); // This is making a request in the higher arb
//BPR collects arbiter summation
fbBPR(Arbiter := fbHigherArb); // This is getting the arbitrated BP




IF CycleLimit > Cycle THEN
    Cycle := Cycle + 1;
ELSE
    Cycle := 8000;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveReq" Id="{0f0c060b-fb07-4a71-b5b6-828444ee58c6}">
      <Declaration><![CDATA[METHOD RemoveReq
VAR

    Arb : FB_Arbiter(20);

    DummyHA : FB_DummyHA;

    Result : BOOL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Arb.AddRequest(30, PMPS_GVL.cst0RateBeam, 'Device');

Arb.ElevateRequest(DummyHA);

TEST('Remove Req');
    Result := Arb.RemoveRequest(77);

    AssertFalse( Result, 'RemoveReq returned true, with nothing to remove');
    AssertFalse( Arb.bStartNewAckRequest , 'StartNewAckRequest is set. Something is wrong');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestCheckRemoveBP" Id="{62a4c245-663e-41d8-901a-0a0faba360f7}">
      <Declaration><![CDATA[METHOD RequestCheckRemoveBP
VAR_INPUT
END_VAR
VAR

    nId    :    DWORD := 1;
    stReq    :    ST_BeamParams;
END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('RequestBP');
AssertTrue(fbArbiter.AddRequest(nId, stReq, 'Device'),
    'Request failed');

TEST_FINISHED();

TEST('DuplicateID');
AssertFalse(fbArbiter.AddRequest(nId, stReq, 'Device'),
    'Duplicate request accepted, not good.');

TEST_FINISHED();

TEST('CheckBP');
AssertFalse(fbArbiter.CheckRequest(nId),
    'Check should fail. Request not arbitrated yet.');
TEST_FINISHED();

TEST('CheckBPArbitrated');
WRITE_PROTECTED_ULINT(ADR(fbArbiter.nActiveCohort), fbArbiter.nNextCohort);
AssertTrue(fbArbiter.CheckRequest(nId),
    'Check should pass.');

TEST_FINISHED();

TEST('IDDoesNotExist');

AssertFalse(fbArbiter.CheckRequest(nId+1),
    'Check returned true when ID does not exist');

TEST_FINISHED();

TEST('RemoveBP');
AssertTrue(fbArbiter.RemoveRequest(nId),
    'Remove failed');
AssertFalse(fbArbiter.CheckRequest(nId),
    'Remove did not remove request');

TEST_FINISHED();

TEST('NoRequestsFullBeam');

AssertFalse(F_DifferentBeamParams(fbArbiter.GetArbitratedBP(), PMPS_GVL.cstFullBeam), 'Arbitrated beam should be full with all requests removed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="StackArbiters" Id="{5b162f4a-6e36-4555-a86c-acebabc10d57}">
      <Declaration><![CDATA[METHOD StackArbiters
VAR_INPUT
END_VAR
VAR
    nId    :    DWORD := 1;
    stReq    :    ST_BeamParams := (nTran:=12);
END_VAR
VAR_INST
    fbArbiter    :    FB_Arbiter(1);

    fbHigherArb : FB_Arbiter(2);

    ArbBP : ST_BeamParams;

    Cycle : INT := 0;

    CycleLimit : INT := 20;

END_VAR
VAR CONSTANT
    SysID : DWORD := 42;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('StackingArbiters');
fbArbiter.AddRequest(nReqID:=nId, stReqBP:=stReq, sDevName :='Device');

fbArbiter.ElevateRequest(fbHigherArb);

ArbBP := fbHigherArb.GetArbitratedBP();

AssertTrue(ArbBP.nTran = 12, 'We should see the transmission number here');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>